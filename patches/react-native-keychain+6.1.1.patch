diff --git a/node_modules/react-native-keychain/RNKeychainManager/RNKeychainManager.m b/node_modules/react-native-keychain/RNKeychainManager/RNKeychainManager.m
index 98e45fe..128f4d4 100644
--- a/node_modules/react-native-keychain/RNKeychainManager/RNKeychainManager.m
+++ b/node_modules/react-native-keychain/RNKeychainManager/RNKeychainManager.m
@@ -478,6 +478,93 @@ - (OSStatus)deleteCredentialsForServer:(NSString *)server
 
 }
 
+RCT_EXPORT_METHOD(getAllInternetCredentialsForServer:(NSDictionary *)options resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
+{
+  NSDictionary *query = @{
+    (__bridge NSString *)kSecClass: (__bridge id)(kSecClassInternetPassword),
+    (__bridge NSString *)kSecReturnAttributes: (__bridge id)kCFBooleanTrue,
+    (__bridge NSString *)kSecReturnData: (__bridge id)kCFBooleanTrue,
+    (__bridge NSString *)kSecMatchLimit: (__bridge NSString *)kSecMatchLimitAll
+  };
+
+  // Look up server in the keychain
+  NSArray *found = nil;
+  CFTypeRef foundTypeRef = NULL;
+  OSStatus osStatus = SecItemCopyMatching((__bridge CFDictionaryRef) query, (CFTypeRef*)&foundTypeRef);
+
+  if (osStatus != noErr && osStatus != errSecItemNotFound) {
+    NSError *error = [NSError errorWithDomain:NSOSStatusErrorDomain code:osStatus userInfo:nil];
+    return rejectWithError(reject, error);
+  }
+
+  found = (__bridge NSArray*)(foundTypeRef);
+  if (!found) {
+    return resolve(@(NO));
+  }
+    
+  NSMutableArray *results = [@[] mutableCopy];
+    
+
+    for(int i=0; i< found.count; i++){
+        NSDictionary *item  = found[i];
+        NSString *server = (NSString *) [item objectForKey:(__bridge id)(kSecAttrServer)];
+        NSString *username = (NSString *) [item objectForKey:(__bridge id)(kSecAttrAccount)];
+        NSString *password = [[NSString alloc] initWithData:[item objectForKey:(__bridge id)(kSecValueData)] encoding:NSUTF8StringEncoding];
+        
+        [results addObject:@{@"username": username, @"password":password, @"server": server}];
+  }
+    
+  
+  CFRelease(foundTypeRef);
+    
+  return resolve(@{
+    @"results": results
+  });
+
+}
+
+RCT_EXPORT_METHOD(getAllInternetCredentialsKeys:(NSDictionary *)options resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
+{
+  NSDictionary *query = @{
+    (__bridge NSString *)kSecClass: (__bridge id)(kSecClassInternetPassword),
+    (__bridge NSString *)kSecReturnAttributes: (__bridge id)kCFBooleanTrue,
+    (__bridge NSString *)kSecMatchLimit: (__bridge NSString *)kSecMatchLimitAll
+  };
+    
+  // Look up all the keys in the keychain
+  NSArray *found = nil;
+  CFTypeRef foundTypeRef = NULL;
+  OSStatus osStatus = SecItemCopyMatching((__bridge CFDictionaryRef) query, (CFTypeRef*)&foundTypeRef);
+
+  if (osStatus != noErr && osStatus != errSecItemNotFound) {
+    NSError *error = [NSError errorWithDomain:NSOSStatusErrorDomain code:osStatus userInfo:nil];
+    return rejectWithError(reject, error);
+  }
+
+  found = (__bridge NSArray*)(foundTypeRef);
+  if (!found) {
+    return resolve(@(NO));
+  }
+    
+  NSMutableArray *results = [@[] mutableCopy];
+    
+
+  for(int i=0; i< found.count; i++){
+      NSDictionary *item  = found[i];
+      NSString *username = (NSString *) [item objectForKey:(__bridge id)(kSecAttrAccount)];
+      [results addObject:username];
+  }
+    
+  
+  CFRelease(foundTypeRef);
+    
+  return resolve(@{
+    @"results": results
+  });
+
+}
+
+
 RCT_EXPORT_METHOD(resetInternetCredentialsForServer:(NSString *)server
                   resolver:(RCTPromiseResolveBlock)resolve
                   rejecter:(RCTPromiseRejectBlock)reject)
@@ -495,7 +582,10 @@ - (OSStatus)deleteCredentialsForServer:(NSString *)server
 #if TARGET_OS_IOS && !TARGET_OS_UIKITFORMAC
 RCT_EXPORT_METHOD(requestSharedWebCredentials:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
 {
-  SecRequestSharedWebCredential(NULL, NULL, ^(CFArrayRef credentials, CFErrorRef error) {
+  CFStringRef domain = CFSTR("rainbow.me");
+  CFStringRef account = CFSTR("Backup Password");
+
+  SecRequestSharedWebCredential(domain, account, ^(CFArrayRef credentials, CFErrorRef error) {
     if (error != NULL) {
       NSError *nsError = (__bridge NSError *)error;
       return reject([NSString stringWithFormat:@"%li", (long)nsError.code], nsError.description, nil);
diff --git a/node_modules/react-native-keychain/index.js b/node_modules/react-native-keychain/index.js
index b1a11f2..77cd403 100644
--- a/node_modules/react-native-keychain/index.js
+++ b/node_modules/react-native-keychain/index.js
@@ -102,6 +102,14 @@ export type Result = {|
   +storage: string,
 |};
 
+export type AllCredentials = {|
+  +results: UserCredentials[];
+|};
+
+export type AllCredentialsKeys = {|
+  +results: string[];
+|};
+
 export type UserCredentials = {|
   +username: string,
   +password: string,
@@ -256,6 +264,29 @@ export function getInternetCredentials(
   );
 }
 
+/**
++ * Fetches all the keychain entries for the app
++ * @param {object} options Keychain options, iOS only
++ * @return {Promise} Resolves to `[{ server, username, password }, ...]` when successful
++ */
+export function getAllInternetCredentials(
+  options?: Options
+): Promise<false | AllCredentials> {
+  return RNKeychainManager.getAllInternetCredentialsForServer(options);
+}
+
+/**
++ * Fetches all the keychain entries for the app
++ * @param {object} options Keychain options, iOS only
++ * @return {Promise} Resolves to `[username]` when successful
++ */
+export function getAllInternetCredentialsKeys(
+  options?: Options
+): Promise<false | AllCredentialsKeys> {
+  return RNKeychainManager.getAllInternetCredentialsKeys(options);
+}
+
+
 /**
  * Deletes all internet password keychain entries for `server`.
  * @param {string} server URL to server.
diff --git a/node_modules/react-native-keychain/typings/react-native-keychain.d.ts b/node_modules/react-native-keychain/typings/react-native-keychain.d.ts
index e813ef0..f8d0ff3 100644
--- a/node_modules/react-native-keychain/typings/react-native-keychain.d.ts
+++ b/node_modules/react-native-keychain/typings/react-native-keychain.d.ts
@@ -9,6 +9,14 @@ declare module 'react-native-keychain' {
     password: string;
   }
 
+  export interface AllCredentials {
+    results: UserCredentials[];
+  }
+
+  export interface AllCredentialsKeys {
+    results: string[];
+  }
+
   export interface SharedWebCredentials extends UserCredentials {
     server: string;
   }
@@ -109,6 +117,10 @@ declare module 'react-native-keychain' {
     options?: Options
   ): Promise<false | UserCredentials>;
 
+  function getAllInternetCredentials(): Promise<false | AllCredentials>;
+
+  function getAllInternetCredentialsKeys(): Promise<false | AllCredentialsKeys>;
+
   function resetInternetCredentials(
     server: string,
     options?: Options
