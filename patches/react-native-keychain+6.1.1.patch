diff --git a/node_modules/react-native-keychain/RNKeychainManager/RNKeychainManager.m b/node_modules/react-native-keychain/RNKeychainManager/RNKeychainManager.m
index 98e45fe..6688234 100644
--- a/node_modules/react-native-keychain/RNKeychainManager/RNKeychainManager.m
+++ b/node_modules/react-native-keychain/RNKeychainManager/RNKeychainManager.m
@@ -478,6 +478,52 @@ - (OSStatus)deleteCredentialsForServer:(NSString *)server
 
 }
 
+RCT_EXPORT_METHOD(getAllInternetCredentialsForServer:(NSDictionary *)options resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
+{
+  NSDictionary *query = @{
+    (__bridge NSString *)kSecClass: (__bridge id)(kSecClassInternetPassword),
+    (__bridge NSString *)kSecReturnAttributes: (__bridge id)kCFBooleanTrue,
+    (__bridge NSString *)kSecReturnData: (__bridge id)kCFBooleanTrue,
+    (__bridge NSString *)kSecMatchLimit: (__bridge NSString *)kSecMatchLimitAll
+  };
+
+  // Look up server in the keychain
+  NSArray *found = nil;
+  CFTypeRef foundTypeRef = NULL;
+  OSStatus osStatus = SecItemCopyMatching((__bridge CFDictionaryRef) query, (CFTypeRef*)&foundTypeRef);
+
+  if (osStatus != noErr && osStatus != errSecItemNotFound) {
+    NSError *error = [NSError errorWithDomain:NSOSStatusErrorDomain code:osStatus userInfo:nil];
+    return rejectWithError(reject, error);
+  }
+
+  found = (__bridge NSArray*)(foundTypeRef);
+  if (!found) {
+    return resolve(@(NO));
+  }
+    
+  NSMutableArray *results = [@[] mutableCopy];
+    
+
+    for(int i=0; i< found.count; i++){
+        NSDictionary *item  = found[i];
+        NSString *server = (NSString *) [item objectForKey:(__bridge id)(kSecAttrServer)];
+        NSString *username = (NSString *) [item objectForKey:(__bridge id)(kSecAttrAccount)];
+        NSString *password = [[NSString alloc] initWithData:[item objectForKey:(__bridge id)(kSecValueData)] encoding:NSUTF8StringEncoding];
+        
+        [results addObject:@{@"username": username, @"password":password, @"server": server}];
+  }
+    
+  
+  CFRelease(foundTypeRef);
+    
+  return resolve(@{
+    @"results": results
+  });
+
+}
+
+
 RCT_EXPORT_METHOD(resetInternetCredentialsForServer:(NSString *)server
                   resolver:(RCTPromiseResolveBlock)resolve
                   rejecter:(RCTPromiseRejectBlock)reject)
diff --git a/node_modules/react-native-keychain/index.js b/node_modules/react-native-keychain/index.js
index b1a11f2..0b25ea0 100644
--- a/node_modules/react-native-keychain/index.js
+++ b/node_modules/react-native-keychain/index.js
@@ -256,6 +256,18 @@ export function getInternetCredentials(
   );
 }
 
+/**
++ * Fetches all the keychain entries for the app
++ * @param {object} options Keychain options, iOS only
++ * @return {Promise} Resolves to `[{ server, username, password }, ...]` when successful
++ */
+export function getAllInternetCredentials(
+  options?: Options
+): Promise<false | UserCredentials> {
+  return RNKeychainManager.getAllInternetCredentialsForServer(options);
+}
+
+
 /**
  * Deletes all internet password keychain entries for `server`.
  * @param {string} server URL to server.
