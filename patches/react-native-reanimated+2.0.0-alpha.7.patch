diff --git a/node_modules/react-native-reanimated/Common/cpp/SharedItems/FrozenObject.cpp b/node_modules/react-native-reanimated/Common/cpp/SharedItems/FrozenObject.cpp
index 9c2c2c3..04c2af0 100644
--- a/node_modules/react-native-reanimated/Common/cpp/SharedItems/FrozenObject.cpp
+++ b/node_modules/react-native-reanimated/Common/cpp/SharedItems/FrozenObject.cpp
@@ -3,13 +3,24 @@
 #include "ShareableValue.h"

 namespace reanimated {
+static std::unordered_map<int, std::unordered_map<std::string, ShareableValue*>> cache = std::unordered_map<int, std::unordered_map<std::string, ShareableValue*>>();
+static std::unordered_map<int, int> to_remove = std::unordered_map<int, int>();
+
+static std::unordered_map<int, std::unordered_map<std::string, std::shared_ptr<ShareableValue>>> cache2 = std::unordered_map<int, std::unordered_map<std::string, std::shared_ptr<ShareableValue>>>();
+static int i = 0;
+

 FrozenObject::FrozenObject(jsi::Runtime &rt, const jsi::Object &object, NativeReanimatedModule *module) {
   auto propertyNames = object.getPropertyNames(rt);
+
   for (size_t i = 0, count = propertyNames.size(rt); i < count; i++) {
     auto propertyName = propertyNames.getValueAtIndex(rt, i).asString(rt);
     map[propertyName.utf8(rt)] = ShareableValue::adapt(rt, object.getProperty(rt, propertyName), module);
   }
+  for (auto v: to_remove) {
+    cache2.erase(v.second);
+  }
+  to_remove.clear();
 }

 jsi::Object FrozenObject::shallowClone(jsi::Runtime &rt) {
@@ -20,4 +31,13 @@ jsi::Object FrozenObject::shallowClone(jsi::Runtime &rt) {
   return object;
 }

+
+FrozenObject::~FrozenObject() {
+  i++;
+  int j = i;
+  cache2[j] = map;
+  to_remove[j] = j;
+
+}
+
 }
diff --git a/node_modules/react-native-reanimated/Common/cpp/Tools/JSIStoreValueUser.cpp b/node_modules/react-native-reanimated/Common/cpp/Tools/JSIStoreValueUser.cpp
index 26b6b29..dd8946c 100644
--- a/node_modules/react-native-reanimated/Common/cpp/Tools/JSIStoreValueUser.cpp
+++ b/node_modules/react-native-reanimated/Common/cpp/Tools/JSIStoreValueUser.cpp
@@ -4,9 +4,11 @@ namespace reanimated {

 int identifier = 0;
 std::atomic<int> StoreUser::ctr;
+std::mutex StoreUser::storeMutex;
 std::unordered_map<int, std::vector<std::shared_ptr<jsi::Value>>> StoreUser::store;

 std::weak_ptr<jsi::Value> StoreUser::getWeakRef(jsi::Runtime &rt) {
+  const std::lock_guard<std::mutex> lock(storeMutex);
   if (StoreUser::store.count(identifier) == 0) {
     StoreUser::store[identifier] = std::vector<std::shared_ptr<jsi::Value>>();
   }
@@ -28,6 +30,7 @@ StoreUser::~StoreUser() {


 void StoreUser::clearStore() {
+  const std::lock_guard<std::mutex> lock(storeMutex);
   StoreUser::store.clear();
 }

diff --git a/node_modules/react-native-reanimated/Common/cpp/headers/SharedItems/FrozenObject.h b/node_modules/react-native-reanimated/Common/cpp/headers/SharedItems/FrozenObject.h
index 126fd41..35888bf 100644
--- a/node_modules/react-native-reanimated/Common/cpp/headers/SharedItems/FrozenObject.h
+++ b/node_modules/react-native-reanimated/Common/cpp/headers/SharedItems/FrozenObject.h
@@ -24,6 +24,7 @@ class FrozenObject : public jsi::HostObject {

   FrozenObject(jsi::Runtime &rt, const jsi::Object &object, NativeReanimatedModule *module);
   jsi::Object shallowClone(jsi::Runtime &rt);
+  ~FrozenObject();
 };

 }
diff --git a/node_modules/react-native-reanimated/Common/cpp/headers/Tools/JSIStoreValueUser.h b/node_modules/react-native-reanimated/Common/cpp/headers/Tools/JSIStoreValueUser.h
index da26369..4263b25 100644
--- a/node_modules/react-native-reanimated/Common/cpp/headers/Tools/JSIStoreValueUser.h
+++ b/node_modules/react-native-reanimated/Common/cpp/headers/Tools/JSIStoreValueUser.h
@@ -6,6 +6,7 @@
 #include <vector>
 #include <unordered_map>
 #include <jsi/jsi.h>
+#include <mutex>

 using namespace facebook;

@@ -15,6 +16,7 @@ class StoreUser {
   int identifier = 0;
   static std::atomic<int> ctr;
   static std::unordered_map<int, std::vector<std::shared_ptr<jsi::Value>>> store;
+  static std::mutex storeMutex;

 public:
   StoreUser() {
diff --git a/node_modules/react-native-reanimated/src/Animated.js b/node_modules/react-native-reanimated/src/Animated.js
index 523853a..d7813c3 100644
--- a/node_modules/react-native-reanimated/src/Animated.js
+++ b/node_modules/react-native-reanimated/src/Animated.js
@@ -81,7 +81,7 @@ export * from './derived';
 export * from './reanimated2';

 export {
-  EasingNode,
+  EasingNode as Easing,
   Transitioning,
   Transition,
   createTransitioningComponent,
diff --git a/node_modules/react-native-reanimated/src/derived/index.js b/node_modules/react-native-reanimated/src/derived/index.js
index e6e1541..943d1b6 100644
--- a/node_modules/react-native-reanimated/src/derived/index.js
+++ b/node_modules/react-native-reanimated/src/derived/index.js
@@ -2,7 +2,7 @@ export { default as acc } from './acc';
 export { default as color } from './color';
 export { default as diff } from './diff';
 export { default as diffClamp } from './diffClamp';
-export { default as interpolateNode, Extrapolate } from './interpolate';
+export { default as interpolateNode, default as interpolate, Extrapolate } from './interpolate';
 export { default as interpolateColors } from './interpolateColors';
 export { default as onChange } from './onChange';
 export { default as useCode } from './useCode';
diff --git a/node_modules/react-native-reanimated/src/reanimated2/Easing.js b/node_modules/react-native-reanimated/src/reanimated2/Easing.js
index 48a3c76..0723069 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/Easing.js
+++ b/node_modules/react-native-reanimated/src/reanimated2/Easing.js
@@ -235,7 +235,7 @@ function inOut(easing) {
   };
 }

-export const Easing = {
+export const NewEasing = {
   linear,
   ease,
   quad,
diff --git a/node_modules/react-native-reanimated/src/reanimated2/animations.js b/node_modules/react-native-reanimated/src/reanimated2/animations.js
index 6629e32..daca979 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/animations.js
+++ b/node_modules/react-native-reanimated/src/reanimated2/animations.js
@@ -1,5 +1,5 @@
 /* global _WORKLET */
-import { Easing } from './Easing';
+import { NewEasing as Easing } from './Easing';
 import NativeReanimated from './NativeReanimated';

 let IN_STYLE_UPDATER = false;
diff --git a/node_modules/react-native-reanimated/src/reanimated2/interpolation.js b/node_modules/react-native-reanimated/src/reanimated2/interpolation.js
index fc43c60..920eaa9 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/interpolation.js
+++ b/node_modules/react-native-reanimated/src/reanimated2/interpolation.js
@@ -28,7 +28,7 @@ function internalInterpolate(x, l, r, ll, rr, type) {
   return val;
 }

-export function interpolate(x, input, output, type) {
+export function newInterpolate(x, input, output, type) {
   'worklet';
   if (x && x.__nodeID) {
     throw new Error(
