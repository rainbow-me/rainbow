diff --git a/node_modules/react-native-tab-view-viewpager-adapter/package.json b/node_modules/react-native-tab-view-viewpager-adapter/package.json
index a32c185..d28954b 100644
--- a/node_modules/react-native-tab-view-viewpager-adapter/package.json
+++ b/node_modules/react-native-tab-view-viewpager-adapter/package.json
@@ -2,8 +2,34 @@
   "name": "react-native-tab-view-viewpager-adapter",
   "version": "1.1.0",
   "description": "",
-  "main": "lib/commonjs/index.js",
-  "react-native": "lib/module/index.js",
+  "main": "src/index.tsx",
+  "react-native": {
+    "lib/commonjs/index.js": "lib/module/index.js",
+    "zlib": "browserify-zlib",
+    "console": "console-browserify",
+    "constants": "constants-browserify",
+    "crypto": "react-native-crypto",
+    "dns": "dns.js",
+    "net": "react-native-tcp",
+    "domain": "domain-browser",
+    "http": "@tradle/react-native-http",
+    "https": "https-browserify",
+    "os": "react-native-os",
+    "path": "path-browserify",
+    "querystring": "querystring-es3",
+    "fs": "react-native-level-fs",
+    "_stream_transform": "readable-stream/transform",
+    "_stream_readable": "readable-stream/readable",
+    "_stream_writable": "readable-stream/writable",
+    "_stream_duplex": "readable-stream/duplex",
+    "_stream_passthrough": "readable-stream/passthrough",
+    "dgram": "react-native-udp",
+    "stream": "stream-browserify",
+    "timers": "timers-browserify",
+    "tty": "tty-browserify",
+    "vm": "vm-browserify",
+    "tls": false
+  },
   "module": "lib/module/index.js",
   "types": "lib/typescript/index.d.ts",
   "files": [
@@ -85,5 +111,32 @@
       "module",
       "typescript"
     ]
+  },
+  "browser": {
+    "lib/commonjs/index.js": "lib/module/index.js",
+    "zlib": "browserify-zlib",
+    "console": "console-browserify",
+    "constants": "constants-browserify",
+    "crypto": "react-native-crypto",
+    "dns": "dns.js",
+    "net": "react-native-tcp",
+    "domain": "domain-browser",
+    "http": "@tradle/react-native-http",
+    "https": "https-browserify",
+    "os": "react-native-os",
+    "path": "path-browserify",
+    "querystring": "querystring-es3",
+    "fs": "react-native-level-fs",
+    "_stream_transform": "readable-stream/transform",
+    "_stream_readable": "readable-stream/readable",
+    "_stream_writable": "readable-stream/writable",
+    "_stream_duplex": "readable-stream/duplex",
+    "_stream_passthrough": "readable-stream/passthrough",
+    "dgram": "react-native-udp",
+    "stream": "stream-browserify",
+    "timers": "timers-browserify",
+    "tty": "tty-browserify",
+    "vm": "vm-browserify",
+    "tls": false
   }
 }
diff --git a/node_modules/react-native-tab-view-viewpager-adapter/src/index.tsx b/node_modules/react-native-tab-view-viewpager-adapter/src/index.tsx
index bd42cde..39b47fc 100644
--- a/node_modules/react-native-tab-view-viewpager-adapter/src/index.tsx
+++ b/node_modules/react-native-tab-view-viewpager-adapter/src/index.tsx
@@ -1,5 +1,5 @@
 import * as React from 'react';
-import { Keyboard, StyleProp, ViewStyle } from 'react-native';
+import { Keyboard, StyleProp, ViewStyle, Platform } from 'react-native';
 import ViewPager from '@react-native-community/viewpager';
 import Animated from 'react-native-reanimated';

@@ -17,17 +17,17 @@ type Props<T extends Route> = PagerCommonProps & {
   onIndexChange: (index: number) => void;
   navigationState: NavigationState<T>;
   children: (
-    props: EventEmitterProps & {
-      // Animated value which represents the state of current index
-      // It can include fractional digits as it represents the intermediate value
-      position: Animated.Node<number>;
-      // Function to actually render the content of the pager
-      // The parent component takes care of rendering
-      render: (children: React.ReactNode) => React.ReactNode;
-      // Callback to call when switching the tab
-      // The tab switch animation is performed even if the index in state is unchanged
-      jumpTo: (key: string) => void;
-    }
+      props: EventEmitterProps & {
+        // Animated value which represents the state of current index
+        // It can include fractional digits as it represents the intermediate value
+        position: Animated.Node<number>;
+        // Function to actually render the content of the pager
+        // The parent component takes care of rendering
+        render: (children: React.ReactNode) => React.ReactNode;
+        // Callback to call when switching the tab
+        // The tab switch animation is performed even if the index in state is unchanged
+        jumpTo: (key: string) => void;
+      }
   ) => React.ReactNode;
   style?: StyleProp<ViewStyle>;
   orientation?: 'vertical' | 'horizontal';
@@ -41,8 +41,8 @@ type Props<T extends Route> = PagerCommonProps & {
 const { event, add } = Animated;

 export default class ViewPagerBackend<T extends Route> extends React.Component<
-  Props<T>
-> {
+    Props<T>
+    > {
   static defaultProps = {
     onIndexChange: () => {},
     swipeEnabled: true,
@@ -50,8 +50,8 @@ export default class ViewPagerBackend<T extends Route> extends React.Component<

   componentDidUpdate(prevProps: Props<T>) {
     if (
-      prevProps.navigationState.index !== this.props.navigationState.index &&
-      !this.justScrolled
+        prevProps.navigationState.index !== this.props.navigationState.index &&
+        !this.justScrolled
     ) {
       this.jumpToIndex(this.props.navigationState.index);
     }
@@ -69,7 +69,7 @@ export default class ViewPagerBackend<T extends Route> extends React.Component<
   private jumpTo = (key: string) => {
     const { navigationState, keyboardDismissMode, onIndexChange } = this.props;
     const index = navigationState.routes.findIndex(
-      (route: { key: string }) => route.key === key
+        (route: { key: string }) => route.key === key
     );

     // A tab switch might occur when we're in the middle of a transition
@@ -163,31 +163,49 @@ export default class ViewPagerBackend<T extends Route> extends React.Component<
       removeListener: this.removeListener,
       jumpTo: this.jumpTo,
       render: children => (
-        <AnimatedViewPager
-          ref={this.ref}
-          lazy={false}
-          style={[{ flex: 1 }, style]}
-          initialPage={this.props.navigationState.index}
-          keyboardDismissMode={
-            // ViewPager does not accept auto mode
-            keyboardDismissMode === 'auto' ? 'on-drag' : keyboardDismissMode
-          }
-          onPageScroll={this.onPageScroll}
-          onPageSelected={(e: { nativeEvent: { position: number } }) =>
-            this.onIndexChange(e.nativeEvent.position)
-          }
-          onPageScrollStateChanged={this.onPageScrollStateChanged}
-          scrollEnabled={swipeEnabled}
-          orientation={orientation}
-          transitionStyle={transition}
-          showPageIndicator={showPageIndicator}
-          pageMargin={pageMargin}
-          overdrag={overdrag}
-          overScrollMode={overScrollMode}
-        >
-          {children}
-        </AnimatedViewPager>
+          <ViewPagerWrapper
+              ref={this.ref}
+              lazy={false}
+              style={[{ flex: 1 }, style]}
+              initialPage={this.props.navigationState.index}
+              keyboardDismissMode={
+                // ViewPager does not accept auto mode
+                keyboardDismissMode === 'auto' ? 'on-drag' : keyboardDismissMode
+              }
+              onPageScroll={this.onPageScroll}
+              onPageSelected={(e: { nativeEvent: { position: number } }) =>
+                  this.onIndexChange(e.nativeEvent.position)
+              }
+              onPageScrollStateChanged={this.onPageScrollStateChanged}
+              scrollEnabled={swipeEnabled}
+              orientation={orientation}
+              transitionStyle={transition}
+              showPageIndicator={showPageIndicator}
+              pageMargin={pageMargin}
+              overdrag={overdrag}
+              overScrollMode={overScrollMode}
+          >
+            {children}
+          </ViewPagerWrapper>
       ),
     });
   }
 }
+
+const ViewPagerWrapper = React.forwardRef((props, fref) => {
+
+  const ref = React.useRef()
+  React.useEffect(() => {
+    Platform.OS === "android" && ref.current.getNode().setPageWithoutAnimation(props.initialPage)
+  }, [])
+  React.useImperativeHandle(fref, () => ref.current)
+  return (
+      <AnimatedViewPager
+          ref={ref}
+          {...props}
+        />
+  )
+})
+
+
+
