diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java
index a9694c6..c5be013 100644
--- a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebView.java
@@ -36,6 +36,11 @@ import com.reactnativecommunity.webview.events.TopMessageEvent;
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.io.InputStream;
+import java.util.Iterator;
+import java.util.Scanner;
+import android.content.Context;
+
 import java.util.List;
 import java.util.Map;
 
@@ -67,6 +72,8 @@ public class RNCWebView extends WebView implements LifecycleEventListener {
     protected boolean hasScrollEvent = false;
     protected boolean nestedScrollEnabled = false;
     protected ProgressChangedFilter progressChangedFilter;
+    protected JSONObject allowedDomains;
+    protected JSONObject allowedDomainsWithSubdomains;
 
     /**
      * WebView must be created with an context of the current activity
@@ -78,6 +85,37 @@ public class RNCWebView extends WebView implements LifecycleEventListener {
         super(reactContext);
         this.createCatalystInstance();
         progressChangedFilter = new ProgressChangedFilter();
+        try {
+            Context context = reactContext.getApplicationContext();
+            InputStream inputStream = context.getResources().openRawResource(R.raw.extras);
+            String jsonString = new Scanner(inputStream).useDelimiter("\\A").next();
+            allowedDomains = new JSONObject(jsonString).getJSONObject("allowedDomains");
+            allowedDomainsWithSubdomains = new JSONObject();
+            Iterator<String> keys = allowedDomains.keys();
+            while(keys.hasNext()) {
+                String domain = keys.next();
+                if (allowedDomains.get(domain) instanceof JSONObject) {
+                    JSONObject domainObj = (JSONObject) allowedDomains.get(domain);
+                    if (domainObj.has("subdomains")) {
+                        allowedDomainsWithSubdomains.put(domain, true);
+                    }
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        allowedDomains = allowedDomains;
+        allowedDomainsWithSubdomains = allowedDomainsWithSubdomains;
+    }
+
+    public static boolean isHostAllowed(JSONObject allowedDomains, JSONObject allowedDomainsWithSubdomains, String host) {
+        boolean exactMatch = allowedDomains.has(host);
+        if (!exactMatch){
+            String[] domainParts = host.split("\\.");
+            String topLevelDomain = domainParts[domainParts.length - 2] + '.' + domainParts[domainParts.length - 1];
+            return allowedDomainsWithSubdomains.has(topLevelDomain);
+        }
+        return true;
     }
 
     public void setIgnoreErrFailedForThisURL(String url) {
@@ -143,69 +181,69 @@ public class RNCWebView extends WebView implements LifecycleEventListener {
     List<Map<String, String>> menuCustomItems;
 
     public void setMenuCustomItems(List<Map<String, String>> menuCustomItems) {
-      this.menuCustomItems = menuCustomItems;
+        this.menuCustomItems = menuCustomItems;
     }
 
     @Override
     public ActionMode startActionMode(ActionMode.Callback callback, int type) {
-      if(menuCustomItems == null ){
-        return super.startActionMode(callback, type);
-      }
-
-      return super.startActionMode(new ActionMode.Callback2() {
-        @Override
-        public boolean onCreateActionMode(ActionMode mode, Menu menu) {
-          for (int i = 0; i < menuCustomItems.size(); i++) {
-            menu.add(Menu.NONE, i, i, (menuCustomItems.get(i)).get("label"));
-          }
-          return true;
+        if(menuCustomItems == null ){
+            return super.startActionMode(callback, type);
         }
 
-        @Override
-        public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {
-          return false;
-        }
+        return super.startActionMode(new ActionMode.Callback2() {
+            @Override
+            public boolean onCreateActionMode(ActionMode mode, Menu menu) {
+                for (int i = 0; i < menuCustomItems.size(); i++) {
+                    menu.add(Menu.NONE, i, i, (menuCustomItems.get(i)).get("label"));
+                }
+                return true;
+            }
 
-        @Override
-        public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
-          WritableMap wMap = Arguments.createMap();
-          RNCWebView.this.evaluateJavascript(
-            "(function(){return {selection: window.getSelection().toString()} })()",
-            new ValueCallback<String>() {
-              @Override
-              public void onReceiveValue(String selectionJson) {
-                Map<String, String> menuItemMap = menuCustomItems.get(item.getItemId());
-                wMap.putString("label", menuItemMap.get("label"));
-                wMap.putString("key", menuItemMap.get("key"));
-                String selectionText = "";
-                try {
-                  selectionText = new JSONObject(selectionJson).getString("selection");
-                } catch (JSONException ignored) {}
-                wMap.putString("selectedText", selectionText);
-                dispatchEvent(RNCWebView.this, new TopCustomMenuSelectionEvent(RNCWebViewWrapper.getReactTagFromWebView(RNCWebView.this), wMap));
-                mode.finish();
-              }
+            @Override
+            public boolean onPrepareActionMode(ActionMode actionMode, Menu menu) {
+                return false;
             }
-          );
-          return true;
-        }
 
-        @Override
-        public void onDestroyActionMode(ActionMode mode) {
-          mode = null;
-        }
+            @Override
+            public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
+                WritableMap wMap = Arguments.createMap();
+                RNCWebView.this.evaluateJavascript(
+                        "(function(){return {selection: window.getSelection().toString()} })()",
+                        new ValueCallback<String>() {
+                            @Override
+                            public void onReceiveValue(String selectionJson) {
+                                Map<String, String> menuItemMap = menuCustomItems.get(item.getItemId());
+                                wMap.putString("label", menuItemMap.get("label"));
+                                wMap.putString("key", menuItemMap.get("key"));
+                                String selectionText = "";
+                                try {
+                                    selectionText = new JSONObject(selectionJson).getString("selection");
+                                } catch (JSONException ignored) {}
+                                wMap.putString("selectedText", selectionText);
+                                dispatchEvent(RNCWebView.this, new TopCustomMenuSelectionEvent(RNCWebViewWrapper.getReactTagFromWebView(RNCWebView.this), wMap));
+                                mode.finish();
+                            }
+                        }
+                );
+                return true;
+            }
 
-        @Override
-        public void onGetContentRect (ActionMode mode,
-                View view,
-                Rect outRect){
-            if (callback instanceof ActionMode.Callback2) {
-                ((ActionMode.Callback2) callback).onGetContentRect(mode, view, outRect);
-            } else {
-                super.onGetContentRect(mode, view, outRect);
+            @Override
+            public void onDestroyActionMode(ActionMode mode) {
+                mode = null;
             }
-          }
-      }, type);
+
+            @Override
+            public void onGetContentRect (ActionMode mode,
+                                          View view,
+                                          Rect outRect){
+                if (callback instanceof ActionMode.Callback2) {
+                    ((ActionMode.Callback2) callback).onGetContentRect(mode, view, outRect);
+                } else {
+                    super.onGetContentRect(mode, view, outRect);
+                }
+            }
+        }, type);
     }
 
     @Override
@@ -249,7 +287,7 @@ public class RNCWebView extends WebView implements LifecycleEventListener {
     }
 
     protected void createCatalystInstance() {
-      ThemedReactContext reactContext = (ThemedReactContext) this.getContext();
+        ThemedReactContext reactContext = (ThemedReactContext) this.getContext();
 
         if (reactContext != null) {
             mCatalystInstance = reactContext.getCatalystInstance();
@@ -387,17 +425,17 @@ public class RNCWebView extends WebView implements LifecycleEventListener {
         super.destroy();
     }
 
-  public ThemedReactContext getThemedReactContext() {
-    return (ThemedReactContext) this.getContext();
-  }
+    public ThemedReactContext getThemedReactContext() {
+        return (ThemedReactContext) this.getContext();
+    }
 
-  protected class RNCWebViewBridge {
+    protected class RNCWebViewBridge {
         private String TAG = "RNCWebViewBridge";
         RNCWebView mWebView;
         String injectedObjectJson;
 
         RNCWebViewBridge(RNCWebView c) {
-          mWebView = c;
+            mWebView = c;
         }
 
         public void setInjectedObjectJson(String s) {
