diff --git a/node_modules/react-native-keychain/RNKeychainManager/RNKeychainManager.m b/node_modules/react-native-keychain/RNKeychainManager/RNKeychainManager.m
index 1e7021c..464f13c 100644
--- a/node_modules/react-native-keychain/RNKeychainManager/RNKeychainManager.m
+++ b/node_modules/react-native-keychain/RNKeychainManager/RNKeychainManager.m
@@ -271,6 +271,93 @@ - (OSStatus)deleteCredentialsForServer:(NSString *)server
   return SecItemDelete((__bridge CFDictionaryRef) query);
 }
 
+RCT_EXPORT_METHOD(getAllInternetCredentialsForServer:(NSDictionary *)options resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
+{
+  NSDictionary *query = @{
+    (__bridge NSString *)kSecClass: (__bridge id)(kSecClassInternetPassword),
+    (__bridge NSString *)kSecReturnAttributes: (__bridge id)kCFBooleanTrue,
+    (__bridge NSString *)kSecReturnData: (__bridge id)kCFBooleanTrue,
+    (__bridge NSString *)kSecMatchLimit: (__bridge NSString *)kSecMatchLimitAll
+  };
+
+  // Look up server in the keychain
+  NSArray *found = nil;
+  CFTypeRef foundTypeRef = NULL;
+  OSStatus osStatus = SecItemCopyMatching((__bridge CFDictionaryRef) query, (CFTypeRef*)&foundTypeRef);
+
+  if (osStatus != noErr && osStatus != errSecItemNotFound) {
+    NSError *error = [NSError errorWithDomain:NSOSStatusErrorDomain code:osStatus userInfo:nil];
+    return rejectWithError(reject, error);
+  }
+
+  found = (__bridge NSArray*)(foundTypeRef);
+  if (!found) {
+    return resolve(@(NO));
+  }
+
+  NSMutableArray *results = [@[] mutableCopy];
+
+
+    for(int i=0; i< found.count; i++){
+        NSDictionary *item  = found[i];
+        NSString *server = (NSString *) [item objectForKey:(__bridge id)(kSecAttrServer)];
+        NSString *username = (NSString *) [item objectForKey:(__bridge id)(kSecAttrAccount)];
+        NSString *password = [[NSString alloc] initWithData:[item objectForKey:(__bridge id)(kSecValueData)] encoding:NSUTF8StringEncoding];
+
+        [results addObject:@{@"username": username, @"password":password, @"server": server}];
+  }
+
+
+  CFRelease(foundTypeRef);
+
+  return resolve(@{
+    @"results": results
+  });
+
+}
+
+RCT_EXPORT_METHOD(getAllInternetCredentialsKeys:(NSDictionary *)options resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
+{
+  NSDictionary *query = @{
+    (__bridge NSString *)kSecClass: (__bridge id)(kSecClassInternetPassword),
+    (__bridge NSString *)kSecReturnAttributes: (__bridge id)kCFBooleanTrue,
+    (__bridge NSString *)kSecMatchLimit: (__bridge NSString *)kSecMatchLimitAll
+  };
+
+  // Look up all the keys in the keychain
+  NSArray *found = nil;
+  CFTypeRef foundTypeRef = NULL;
+  OSStatus osStatus = SecItemCopyMatching((__bridge CFDictionaryRef) query, (CFTypeRef*)&foundTypeRef);
+
+  if (osStatus != noErr && osStatus != errSecItemNotFound) {
+    NSError *error = [NSError errorWithDomain:NSOSStatusErrorDomain code:osStatus userInfo:nil];
+    return rejectWithError(reject, error);
+  }
+
+  found = (__bridge NSArray*)(foundTypeRef);
+  if (!found) {
+    return resolve(@(NO));
+  }
+
+  NSMutableArray *results = [@[] mutableCopy];
+
+
+  for(int i=0; i< found.count; i++){
+      NSDictionary *item  = found[i];
+      NSString *username = (NSString *) [item objectForKey:(__bridge id)(kSecAttrAccount)];
+      [results addObject:username];
+  }
+
+
+  CFRelease(foundTypeRef);
+
+  return resolve(@{
+    @"results": results
+  });
+
+}
+
+
 -(NSArray<NSString*>*)getAllServicesForSecurityClasses:(NSArray *)secItemClasses
 {
   NSMutableDictionary *query = [NSMutableDictionary dictionaryWithObjectsAndKeys:
diff --git a/node_modules/react-native-keychain/android/src/main/java/com/oblador/keychain/KeychainModule.java b/node_modules/react-native-keychain/android/src/main/java/com/oblador/keychain/KeychainModule.java
index 6ca68cb..72426ca 100644
--- a/node_modules/react-native-keychain/android/src/main/java/com/oblador/keychain/KeychainModule.java
+++ b/node_modules/react-native-keychain/android/src/main/java/com/oblador/keychain/KeychainModule.java
@@ -17,6 +17,7 @@ import com.facebook.react.bridge.ReactContextBaseJavaModule;
 import com.facebook.react.bridge.ReactMethod;
 import com.facebook.react.bridge.ReadableMap;
 import com.facebook.react.bridge.WritableMap;
+import com.facebook.react.bridge.WritableArray;
 import com.oblador.keychain.PrefsStorage.ResultSet;
 import com.oblador.keychain.cipherStorage.CipherStorage;
 import com.oblador.keychain.cipherStorage.CipherStorage.DecryptionResult;
@@ -149,6 +150,11 @@ public class KeychainModule extends ReactContextBaseJavaModule {
     }
   }
 
+  @Override
+  public boolean canOverrideExistingModule() {
+    return true;
+  }
+
   /** Allow initialization in chain. */
   public static KeychainModule withWarming(@NonNull final ReactApplicationContext reactContext) {
     final KeychainModule instance = new KeychainModule(reactContext);
@@ -327,6 +333,36 @@ public class KeychainModule extends ReactContextBaseJavaModule {
     }
   }
 
+  @ReactMethod
+  public void getAllInternetCredentialsForServer(ReadableMap options, Promise promise) {
+    try {
+      WritableArray allCredentials = Arguments.createArray();
+      CipherStorage currentCipherStorage = getCipherStorageForCurrentAPILevel();
+      ArrayList<Map> allResultsets = prefsStorage.getAllEncryptedEntries();
+      for (Map data : allResultsets) {
+        ResultSet resultSet = (ResultSet) data.get("resultSet");
+        String service = (String)data.get("service");
+        final String rules = getSecurityRulesOrDefault(options);
+        final PromptInfo promptInfo = getPromptInfo(options);
+        final DecryptionResult decryptionResult = decryptCredentials(service, currentCipherStorage, resultSet, rules, promptInfo);
+        WritableMap credentials = Arguments.createMap();
+        credentials.putString("service", service);
+        credentials.putString("username", decryptionResult.username);
+        credentials.putString("password", decryptionResult.password);
+        allCredentials.pushMap(credentials);
+      }
+      WritableMap result = Arguments.createMap();
+      result.putArray("results", allCredentials);
+      promise.resolve(result);
+    } catch (KeyStoreAccessException e) {
+      Log.e(KEYCHAIN_MODULE, e.getMessage());
+      promise.reject(Errors.E_KEYSTORE_ACCESS_ERROR, e);
+    } catch (CryptoFailedException e) {
+      Log.e(KEYCHAIN_MODULE, e.getMessage());
+      promise.reject(Errors.E_CRYPTO_FAILED, e);
+    }
+  }
+
   @ReactMethod
   public void getAllGenericPasswordServices(@NonNull final Promise promise) {
     try {
diff --git a/node_modules/react-native-keychain/android/src/main/java/com/oblador/keychain/PrefsStorage.java b/node_modules/react-native-keychain/android/src/main/java/com/oblador/keychain/PrefsStorage.java
index b7ecd51..9bfa595 100644
--- a/node_modules/react-native-keychain/android/src/main/java/com/oblador/keychain/PrefsStorage.java
+++ b/node_modules/react-native-keychain/android/src/main/java/com/oblador/keychain/PrefsStorage.java
@@ -12,7 +12,10 @@ import com.oblador.keychain.KeychainModule.KnownCiphers;
 import com.oblador.keychain.cipherStorage.CipherStorage;
 import com.oblador.keychain.cipherStorage.CipherStorage.EncryptionResult;
 
+import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Set;
 
 @SuppressWarnings({"unused", "WeakerAccess"})
@@ -154,4 +157,23 @@ public class PrefsStorage {
 
     return null;
   }
+
+  public ArrayList<Map> getAllEncryptedEntries() {
+    ArrayList<String> processedServices = new ArrayList<String>();
+    ArrayList<Map> data  =  new ArrayList<Map>();
+    Map<String, ?> allItems = this.prefs.getAll();
+    for (Map.Entry<String, ?> entry : allItems.entrySet()) {
+        String key = entry.getKey();
+        String serviceName = key.substring(0, key.length() - 2);
+        if(!processedServices.contains(serviceName)) {
+            ResultSet item = getEncryptedEntry(serviceName);
+            HashMap<String, Object> map=new HashMap<String,Object>();
+            map.put("resultSet", item);
+            map.put("service", serviceName);
+            data.add(map);
+            processedServices.add(serviceName);
+          }
+      }
+    return data;
+   }
 }
diff --git a/node_modules/react-native-keychain/index.js b/node_modules/react-native-keychain/index.js
index 75c0d5c..e99d235 100644
--- a/node_modules/react-native-keychain/index.js
+++ b/node_modules/react-native-keychain/index.js
@@ -108,6 +108,14 @@ export type Result = {|
   +storage: string,
 |};
 
+export type AllCredentials = {|
+  results: UserCredentials[],
+|};
+
+export type AllCredentialsKeys = {|
+  results: string[],
+|};
+
 export type UserCredentials = {|
   +username: string,
   +password: string,
@@ -201,6 +209,32 @@ export function getGenericPassword(
   return RNKeychainManager.getGenericPasswordForOptions(options);
 }
 
+/**
+* Fetches all the keychain entries for the app
+* @param {object} options Keychain options, iOS only
+* @return {Promise} Resolves to `[{ server, username, password }, ...]` when successful
+*/
+export function getAllInternetCredentials(
+   options?: Options
+  ): Promise<false | AllCredentials> {
+   return RNKeychainManager.getAllInternetCredentialsForServer(
+     normalizeOptions(options)
+   );
+  }
+  
+  /**
+  * Fetches all the keychain entries for the app
+  * @param {object} options Keychain options, iOS only
+  * @return {Promise} Resolves to `[username]` when successful
+  */
+  export function getAllInternetCredentialsKeys(
+   options?: Options
+  ): Promise<false | AllCredentialsKeys> {
+   return RNKeychainManager.getAllInternetCredentialsKeys(
+     normalizeOptions(options)
+   );
+  }
+
 /**
  * Deletes all generic password keychain entries for `service`.
  * @param {object} options An Keychain options object.
diff --git a/node_modules/react-native-keychain/typings/react-native-keychain.d.ts b/node_modules/react-native-keychain/typings/react-native-keychain.d.ts
index af2eb56..fd11459 100644
--- a/node_modules/react-native-keychain/typings/react-native-keychain.d.ts
+++ b/node_modules/react-native-keychain/typings/react-native-keychain.d.ts
@@ -9,6 +9,14 @@ declare module 'react-native-keychain' {
     password: string;
   }
 
+  export interface AllCredentials {
+    results: UserCredentials[];
+  }
+    
+  export interface AllCredentialsKeys {
+    results: string[];
+  }
+
   export interface SharedWebCredentials extends UserCredentials {
     server: string;
   }
@@ -111,6 +119,10 @@ declare module 'react-native-keychain' {
     options?: Options
   ): Promise<false | SharedWebCredentials>;
 
+  function getAllInternetCredentials(): Promise<false | AllCredentials>;
+
+  function getAllInternetCredentialsKeys(): Promise<false | AllCredentialsKeys>;
+
   function resetInternetCredentials(
     server: string,
     options?: Options
