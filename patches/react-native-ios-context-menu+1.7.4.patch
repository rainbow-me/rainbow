diff --git a/node_modules/react-native-ios-context-menu/ios/src/ReactNative/RNIContextMenuButton/RNIContextMenuButton.swift b/node_modules/react-native-ios-context-menu/ios/src/ReactNative/RNIContextMenuButton/RNIContextMenuButton.swift
index 4926f62..27d40e3 100644
--- a/node_modules/react-native-ios-context-menu/ios/src/ReactNative/RNIContextMenuButton/RNIContextMenuButton.swift
+++ b/node_modules/react-native-ios-context-menu/ios/src/ReactNative/RNIContextMenuButton/RNIContextMenuButton.swift
@@ -12,116 +12,118 @@ import UIKit;
 @available(iOS 14, *)
 class RNIContextMenuButton: UIButton {
     
-  // MARK: - Properties
-  // ------------------
+    // MARK: - Properties
+    // ------------------
     
-  weak var bridge: RCTBridge!;
+    weak var bridge: RCTBridge!;
     
-  var isContextMenuVisible = false;
-  var didPressMenuItem     = false;
+    var isContextMenuVisible = false;
+    var didPressMenuItem     = false;
     
-  weak var contextMenuViewController: RNIContextMenuViewController?;
+    weak var contextMenuViewController: RNIContextMenuViewController?;
     
-  private var didTriggerCleanup = false;
+    private var didTriggerCleanup = false;
     
-  /// Whether or not the current view was successfully added as child VC
-  private var didAttachToParentVC = false;
+    /// Whether or not the current view was successfully added as child VC
+    private var didAttachToParentVC = false;
     
-  // MARK: - RN Exported Event Props
-  // -------------------------------
+    // MARK: - RN Exported Event Props
+    // -------------------------------
     
-  @objc var onMenuWillShow  : RCTBubblingEventBlock?;
-  @objc var onMenuWillHide  : RCTBubblingEventBlock?;
-  @objc var onMenuWillCancel: RCTBubblingEventBlock?;
+    @objc var onMenuWillShow  : RCTBubblingEventBlock?;
+    @objc var onMenuWillHide  : RCTBubblingEventBlock?;
+    @objc var onMenuWillCancel: RCTBubblingEventBlock?;
     
-  @objc var onMenuDidShow  : RCTBubblingEventBlock?;
-  @objc var onMenuDidHide  : RCTBubblingEventBlock?;
-  @objc var onMenuDidCancel: RCTBubblingEventBlock?;
+    @objc var onMenuDidShow  : RCTBubblingEventBlock?;
+    @objc var onMenuDidHide  : RCTBubblingEventBlock?;
+    @objc var onMenuDidCancel: RCTBubblingEventBlock?;
     
-  @objc var onPressMenuItem: RCTBubblingEventBlock?;
+    @objc var onPressMenuItem: RCTBubblingEventBlock?;
     
-  // MARK: - RN Exported Props
-  // -------------------------
+    // MARK: - RN Exported Props
+    // -------------------------
     
-  @objc var menuConfig: NSDictionary? {
-    didSet {
-      guard
-        let menuConfig     = self.menuConfig, menuConfig.count > 0,
-        let rootMenuConfig = RNIMenuItem(dictionary: menuConfig)
-      else { return };
+    @objc var menuAlignmentOverride: NSString?
     
-      #if DEBUG
-      print("RNIContextMenuButton"
-        + " - menuConfig didSet"
-        + " - RNIMenuItem init"
-      );
-      #endif
+    @objc var menuConfig: NSDictionary? {
+        didSet {
+            guard
+                let menuConfig     = self.menuConfig, menuConfig.count > 0,
+                let rootMenuConfig = RNIMenuItem(dictionary: menuConfig)
+            else { return };
             
-      let rootMenu = rootMenuConfig.createMenu {(dict, action) in
-        self.didPressMenuItem = true;
-        self.onPressMenuItem?(dict);
-      };
+#if DEBUG
+            print("RNIContextMenuButton"
+                  + " - menuConfig didSet"
+                  + " - RNIMenuItem init"
+            );
+#endif
             
-      if self.isContextMenuVisible,
-         let interaction: UIContextMenuInteraction = self.contextMenuInteraction {
+            let rootMenu = rootMenuConfig.createMenu {(dict, action) in
+                self.didPressMenuItem = true;
+                self.onPressMenuItem?(dict);
+            };
             
-        // context menu is open, update the menu items
-        interaction.updateVisibleMenu {(menu: UIMenu) in
-          return rootMenu;
-        };
+            if self.isContextMenuVisible,
+               let interaction: UIContextMenuInteraction = self.contextMenuInteraction {
                 
-      } else {
-        // set menu property
-        self.menu = rootMenu;
-      };
-    }
-  };
+                // context menu is open, update the menu items
+                interaction.updateVisibleMenu {(menu: UIMenu) in
+                    return rootMenu;
+                };
                 
-  @objc var isMenuPrimaryAction: Bool = false {
-    didSet {
-      guard self.isMenuPrimaryAction != oldValue else { return };
-      self.showsMenuAsPrimaryAction = self.isMenuPrimaryAction;
-    }
-  };
+            } else {
+                // set menu property
+                self.menu = rootMenu;
+            };
+        }
+    };
     
-  @objc var enableContextMenu: Bool = true {
-    didSet {
-      guard self.enableContextMenu != oldValue else { return };
-      self.isContextMenuInteractionEnabled = self.isMenuPrimaryAction;
-    }
-  };
+    @objc var isMenuPrimaryAction: Bool = false {
+        didSet {
+            guard self.isMenuPrimaryAction != oldValue else { return };
+            self.showsMenuAsPrimaryAction = self.isMenuPrimaryAction;
+        }
+    };
+    
+    @objc var enableContextMenu: Bool = true {
+        didSet {
+            guard self.enableContextMenu != oldValue else { return };
+            self.isContextMenuInteractionEnabled = self.isMenuPrimaryAction;
+        }
+    };
     
-  // MARK: - Init
-  // ------------
+    // MARK: - Init
+    // ------------
     
-  init(bridge: RCTBridge) {
-    super.init(frame: CGRect());
-    self.bridge = bridge;
+    init(bridge: RCTBridge) {
+        super.init(frame: CGRect());
+        self.bridge = bridge;
         
-    self.setupAddContextMenuInteraction();
-  };
+        self.setupAddContextMenuInteraction();
+    };
     
-  required init?(coder: NSCoder) {
-    fatalError("init(coder:) has not been implemented");
-  };
+    required init?(coder: NSCoder) {
+        fatalError("init(coder:) has not been implemented");
+    };
     
-  override func reactSetFrame(_ frame: CGRect) {
-    super.reactSetFrame(frame);
-  };
+    override func reactSetFrame(_ frame: CGRect) {
+        super.reactSetFrame(frame);
+    };
     
-  public override func didMoveToWindow() {
-    if self.window == nil,
-       !self.didAttachToParentVC {
+    public override func didMoveToWindow() {
+        if self.window == nil,
+           !self.didAttachToParentVC {
             
-      // not using UINavigationController... manual cleanup
-      self.cleanup();
+            // not using UINavigationController... manual cleanup
+            self.cleanup();
             
-    } else if !self.didAttachToParentVC {
+        } else if !self.didAttachToParentVC {
             
-      // setup - might be using UINavigationController, attach as child vc
-      self.attachToParentVC();
+            // setup - might be using UINavigationController, attach as child vc
+            self.attachToParentVC();
+        };
     };
-  };
 };
 
 // MARK: - Private Functions
@@ -130,37 +132,37 @@ class RNIContextMenuButton: UIButton {
 @available(iOS 14, *)
 private extension RNIContextMenuButton {
     
-  /// Add a context menu interaction to button
-  func setupAddContextMenuInteraction(){
-    self.isEnabled = true;
-    self.isUserInteractionEnabled = true;
-    
-    let gesture = UIGestureRecognizer();
-    gesture.cancelsTouchesInView = true;
-    gesture.delegate = self;
-    
-    self.addAction( UIAction(title: ""){ action in
-      print("menuActionTriggered");
-      // TODO: wip
-    }, for: .menuActionTriggered);
-  };
-  
-  func cleanup(){
-    guard !self.didTriggerCleanup else { return };
-    self.didTriggerCleanup = true;
-    
-    self.contextMenuInteraction?.dismissMenu();
-    
-    // remove this view from registry
-    RNIUtilities.recursivelyRemoveFromViewRegistry(
-      bridge   : self.bridge,
-      reactView: self
-    );
-    
-    #if DEBUG
-    NotificationCenter.default.removeObserver(self);
-    #endif
-  };
+    /// Add a context menu interaction to button
+    func setupAddContextMenuInteraction(){
+        self.isEnabled = true;
+        self.isUserInteractionEnabled = true;
+        
+        let gesture = UIGestureRecognizer();
+        gesture.cancelsTouchesInView = true;
+        gesture.delegate = self;
+        
+        self.addAction( UIAction(title: ""){ action in
+            print("menuActionTriggered");
+            // TODO: wip
+        }, for: .menuActionTriggered);
+    };
+    
+    func cleanup(){
+        guard !self.didTriggerCleanup else { return };
+        self.didTriggerCleanup = true;
+        
+        self.contextMenuInteraction?.dismissMenu();
+        
+        // remove this view from registry
+        RNIUtilities.recursivelyRemoveFromViewRegistry(
+            bridge   : self.bridge,
+            reactView: self
+        );
+        
+#if DEBUG
+        NotificationCenter.default.removeObserver(self);
+#endif
+    };
 };
 
 // MARK: - Functions For Manager
@@ -168,9 +170,9 @@ private extension RNIContextMenuButton {
 
 @available(iOS 14, *)
 extension RNIContextMenuButton {
-  @objc func dissmissMenu(){
-    self.contextMenuInteraction?.dismissMenu();
-  };
+    @objc func dissmissMenu(){
+        self.contextMenuInteraction?.dismissMenu();
+    };
 };
 
 // MARK: - UIContextMenuInteractionDelegate
@@ -179,52 +181,52 @@ extension RNIContextMenuButton {
 @available(iOS 14, *)
 extension RNIContextMenuButton {
     
-  // context menu display begins
-  override func contextMenuInteraction(_ interaction: UIContextMenuInteraction, willDisplayMenuFor configuration: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?) {
-    super.contextMenuInteraction(interaction, willDisplayMenuFor: configuration, animator: animator);
+    // context menu display begins
+    override func contextMenuInteraction(_ interaction: UIContextMenuInteraction, willDisplayMenuFor configuration: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?) {
+        super.contextMenuInteraction(interaction, willDisplayMenuFor: configuration, animator: animator);
         
-    #if DEBUG
-    print("RNIContextMenuButton, UIContextMenuInteractionDelegate"
-      + " - contextMenuInteraction: will show"
-    );
-    #endif
+#if DEBUG
+        print("RNIContextMenuButton, UIContextMenuInteractionDelegate"
+              + " - contextMenuInteraction: will show"
+        );
+#endif
         
-    self.isContextMenuVisible = true;
+        self.isContextMenuVisible = true;
         
-    self.onMenuWillShow?([:]);
-    animator?.addCompletion {
-      self.onMenuDidShow?([:]);
+        self.onMenuWillShow?([:]);
+        animator?.addCompletion {
+            self.onMenuDidShow?([:]);
+        };
     };
-  };
     
-  // context menu display ends
-  override func contextMenuInteraction(_ interaction: UIContextMenuInteraction, willEndFor configuration: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?) {
-    super.contextMenuInteraction(interaction, willEndFor: configuration, animator: animator);
+    // context menu display ends
+    override func contextMenuInteraction(_ interaction: UIContextMenuInteraction, willEndFor configuration: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?) {
+        super.contextMenuInteraction(interaction, willEndFor: configuration, animator: animator);
         
-    #if DEBUG
-    print("RNIContextMenuButton, UIContextMenuInteractionDelegate"
-      + " - contextMenuInteraction: will hide"
-    );
-    #endif
+#if DEBUG
+        print("RNIContextMenuButton, UIContextMenuInteractionDelegate"
+              + " - contextMenuInteraction: will hide"
+        );
+#endif
         
-    guard self.isContextMenuVisible else { return };
+        guard self.isContextMenuVisible else { return };
         
-    self.onMenuWillHide?([:]);
-    if !self.didPressMenuItem {
-      self.onMenuWillCancel?([:]);
-    };
+        self.onMenuWillHide?([:]);
+        if !self.didPressMenuItem {
+            self.onMenuWillCancel?([:]);
+        };
         
-    animator?.addCompletion {
-      if !self.didPressMenuItem {
-        self.onMenuDidCancel?([:]);
-      };
+        animator?.addCompletion {
+            if !self.didPressMenuItem {
+                self.onMenuDidCancel?([:]);
+            };
             
-      self.onMenuDidHide?([:]);
-      self.didPressMenuItem = false;
-    };
+            self.onMenuDidHide?([:]);
+            self.didPressMenuItem = false;
+        };
         
-    self.isContextMenuVisible = false;
-  };
+        self.isContextMenuVisible = false;
+    };
 };
 
 // MARK: - UIGestureRecognizerDelegate
@@ -232,9 +234,9 @@ extension RNIContextMenuButton {
 
 @available(iOS 14, *)
 extension RNIContextMenuButton: UIGestureRecognizerDelegate {
-  func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldReceive touch: UITouch) -> Bool {
-    return true;
-  };
+    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldReceive touch: UITouch) -> Bool {
+        return true;
+    };
 };
 
 // MARK: - RNIContextMenu
@@ -243,35 +245,53 @@ extension RNIContextMenuButton: UIGestureRecognizerDelegate {
 @available(iOS 14, *)
 extension RNIContextMenuButton: RNIContextMenu {
     
-  func notifyViewControllerDidPop(sender: RNIContextMenuViewController) {
-    // trigger cleanup
-    self.cleanup();
-  };
+    func notifyViewControllerDidPop(sender: RNIContextMenuViewController) {
+        // trigger cleanup
+        self.cleanup();
+    };
     
-  func attachToParentVC(){
-    guard !self.didAttachToParentVC,
-          // find the nearest parent view controller
-          let parentVC = RNIUtilities
+    func attachToParentVC(){
+        guard !self.didAttachToParentVC,
+              // find the nearest parent view controller
+              let parentVC = RNIUtilities
             .getParent(responder: self, type: UIViewController.self)
-    else { return };
+        else { return };
         
-    self.didAttachToParentVC = true;
+        self.didAttachToParentVC = true;
         
-    let childVC = RNIContextMenuViewController(contextMenuView: self);
-    childVC.parentVC = parentVC;
+        let childVC = RNIContextMenuViewController(contextMenuView: self);
+        childVC.parentVC = parentVC;
         
-    self.contextMenuViewController = childVC;
+        self.contextMenuViewController = childVC;
         
-    parentVC.addChild(childVC);
-    childVC.didMove(toParent: parentVC);
-  };
+        parentVC.addChild(childVC);
+        childVC.didMove(toParent: parentVC);
+    };
     
-  func detachFromParentVC(){
-    guard !self.didAttachToParentVC,
-          let childVC = self.contextMenuViewController
-    else { return };
+    func detachFromParentVC(){
+        guard !self.didAttachToParentVC,
+              let childVC = self.contextMenuViewController
+        else { return };
         
-    childVC.willMove(toParent: nil);
-    childVC.removeFromParent();
-  };
+        childVC.willMove(toParent: nil);
+        childVC.removeFromParent();
+    };
 };
+
+// MARK: - Custom alignment
+// ------------------------
+
+@available(iOS 14, *)
+extension RNIContextMenuButton {
+    override func menuAttachmentPoint(for configuration: UIContextMenuConfiguration) -> CGPoint {
+        let original = super.menuAttachmentPoint(for: configuration)
+        print("alignmentProp: \(self.menuAlignmentOverride)")
+        print("Attachment point X = \(original.x), Y = \(original.y)")
+        if (self.menuAlignmentOverride == "left") {
+            return CGPoint(x: 0, y: original.y)
+        } else if (self.menuAlignmentOverride == "right") {
+            return CGPoint(x: self.bounds.width, y: original.y)
+        }
+        return original
+    }
+}
diff --git a/node_modules/react-native-ios-context-menu/ios/src/ReactNative/RNIContextMenuButton/RNIContextMenuButtonManager.m b/node_modules/react-native-ios-context-menu/ios/src/ReactNative/RNIContextMenuButton/RNIContextMenuButtonManager.m
index 8af7359..a606051 100644
--- a/node_modules/react-native-ios-context-menu/ios/src/ReactNative/RNIContextMenuButton/RNIContextMenuButtonManager.m
+++ b/node_modules/react-native-ios-context-menu/ios/src/ReactNative/RNIContextMenuButton/RNIContextMenuButtonManager.m
@@ -34,6 +34,7 @@ RCT_EXPORT_VIEW_PROPERTY(menuConfig, NSDictionary);
 RCT_EXPORT_VIEW_PROPERTY(enableContextMenu   , BOOL);
 RCT_EXPORT_VIEW_PROPERTY(isMenuPrimaryAction , BOOL);
 RCT_EXPORT_VIEW_PROPERTY(isContextMenuEnabled, BOOL);
+RCT_EXPORT_VIEW_PROPERTY(menuAlignmentOverride, NSString);
 
 // MARK: -  View Manager Commands
 // ------------------------------
diff --git a/node_modules/react-native-ios-context-menu/lib/typescript/components/ContextMenuButton/ContextMenuButton.d.ts b/node_modules/react-native-ios-context-menu/lib/typescript/components/ContextMenuButton/ContextMenuButton.d.ts
index d46a89e..d9e0b55 100644
--- a/node_modules/react-native-ios-context-menu/lib/typescript/components/ContextMenuButton/ContextMenuButton.d.ts
+++ b/node_modules/react-native-ios-context-menu/lib/typescript/components/ContextMenuButton/ContextMenuButton.d.ts
@@ -8,6 +8,7 @@ export declare class ContextMenuButton extends React.PureComponent<ContextMenuBu
         enableContextMenu: boolean;
         useActionSheetFallback: boolean;
         menuConfig: import("../..").MenuConfig | undefined;
+        menuAlignmentOverride: 'left' | 'right' | undefined;
         isMenuPrimaryAction: boolean | undefined;
         onMenuWillShow: OnMenuWillShowEvent | undefined;
         onMenuWillHide: OnMenuWillHideEvent | undefined;
diff --git a/node_modules/react-native-ios-context-menu/lib/typescript/components/ContextMenuButton/ContextMenuButtonTypes.d.ts b/node_modules/react-native-ios-context-menu/lib/typescript/components/ContextMenuButton/ContextMenuButtonTypes.d.ts
index 02f7fb9..3d3e395 100644
--- a/node_modules/react-native-ios-context-menu/lib/typescript/components/ContextMenuButton/ContextMenuButtonTypes.d.ts
+++ b/node_modules/react-native-ios-context-menu/lib/typescript/components/ContextMenuButton/ContextMenuButtonTypes.d.ts
@@ -1,6 +1,6 @@
 import type { ViewProps } from 'react-native';
 import type { RNIContextMenuButtonBaseProps } from '../../native_components/RNIContextMenuButton';
-export declare type ContextMenuButtonBaseProps = Pick<RNIContextMenuButtonBaseProps, 'enableContextMenu' | 'isMenuPrimaryAction' | 'menuConfig' | 'onMenuWillShow' | 'onMenuWillHide' | 'onMenuWillCancel' | 'onMenuDidShow' | 'onMenuDidHide' | 'onMenuDidCancel' | 'onPressMenuItem'> & {
+export declare type ContextMenuButtonBaseProps = Pick<RNIContextMenuButtonBaseProps, 'enableContextMenu' | 'menuAlignmentOverride' | 'isMenuPrimaryAction' | 'menuConfig' | 'onMenuWillShow' | 'onMenuWillHide' | 'onMenuWillCancel' | 'onMenuDidShow' | 'onMenuDidHide' | 'onMenuDidCancel' | 'onPressMenuItem'> & {
     useActionSheetFallback?: boolean;
 };
 export declare type ContextMenuButtonProps = ViewProps & ContextMenuButtonBaseProps;
diff --git a/node_modules/react-native-ios-context-menu/lib/typescript/native_components/RNIContextMenuButton.d.ts b/node_modules/react-native-ios-context-menu/lib/typescript/native_components/RNIContextMenuButton.d.ts
index ad9f406..d5affc7 100644
--- a/node_modules/react-native-ios-context-menu/lib/typescript/native_components/RNIContextMenuButton.d.ts
+++ b/node_modules/react-native-ios-context-menu/lib/typescript/native_components/RNIContextMenuButton.d.ts
@@ -1,6 +1,6 @@
 import { HostComponent, ViewProps } from 'react-native';
 import type { RNIContextMenuViewProps } from './RNIContextMenuView';
-export declare type RNIContextMenuButtonBaseProps = Pick<RNIContextMenuViewProps, 'menuConfig' | 'onMenuWillShow' | 'onMenuWillHide' | 'onMenuWillCancel' | 'onMenuDidShow' | 'onMenuDidHide' | 'onMenuDidCancel' | 'onPressMenuItem'> & {
+export declare type RNIContextMenuButtonBaseProps = Pick<RNIContextMenuViewProps, 'menuConfig' | 'menuAlignmentOverride' | 'onMenuWillShow' | 'onMenuWillHide' | 'onMenuWillCancel' | 'onMenuDidShow' | 'onMenuDidHide' | 'onMenuDidCancel' | 'onPressMenuItem'> & {
     enableContextMenu?: boolean;
     isMenuPrimaryAction?: boolean;
 };
diff --git a/node_modules/react-native-ios-context-menu/lib/typescript/native_components/RNIContextMenuView.d.ts b/node_modules/react-native-ios-context-menu/lib/typescript/native_components/RNIContextMenuView.d.ts
index 525a882..ec9b3eb 100644
--- a/node_modules/react-native-ios-context-menu/lib/typescript/native_components/RNIContextMenuView.d.ts
+++ b/node_modules/react-native-ios-context-menu/lib/typescript/native_components/RNIContextMenuView.d.ts
@@ -4,6 +4,7 @@ import type { MenuPreviewConfig } from '../types/MenuPreviewConfig';
 import type { OnMenuWillShowEvent, OnMenuWillHideEvent, OnMenuDidShowEvent, OnMenuDidHideEvent, OnMenuWillCancelEvent, OnMenuDidCancelEvent, OnMenuWillCreateEvent, OnPressMenuItemEvent, OnPressMenuPreviewEvent } from '../types/MenuEvents';
 export declare type RNIContextMenuViewProps = ViewProps & {
     menuConfig?: MenuConfig;
+    menuAlignmentOverride?: 'left' | 'right';
     previewConfig?: MenuPreviewConfig;
     /**
      * On iOS 15+, the `MenuActionConfig.discoverabilityTitle` is no longer
diff --git a/node_modules/react-native-ios-context-menu/src/components/ContextMenuButton/ContextMenuButton.tsx b/node_modules/react-native-ios-context-menu/src/components/ContextMenuButton/ContextMenuButton.tsx
index e545806..4fbb9ac 100644
--- a/node_modules/react-native-ios-context-menu/src/components/ContextMenuButton/ContextMenuButton.tsx
+++ b/node_modules/react-native-ios-context-menu/src/components/ContextMenuButton/ContextMenuButton.tsx
@@ -1,5 +1,6 @@
 import React from 'react';
-import { StyleSheet, View, TouchableOpacity, UIManager, findNodeHandle } from 'react-native';
+import { StyleSheet, View, UIManager, findNodeHandle } from 'react-native';
+import { TouchableOpacity } from 'react-native-gesture-handler'
 
 import { RNIContextMenuButton, RNIContextMenuButtonBaseProps, RNIContextMenuButtonCommands } from '../../native_components/RNIContextMenuButton';
 
@@ -211,7 +212,9 @@ export class ContextMenuButton extends React.PureComponent<ContextMenuButtonProp
       ): shouldUseActionSheetFallback? (
         // C - Use 'ActionSheet' Fallback
         <TouchableOpacity 
-          onLongPress={this._handleOnLongPress}
+          {...({
+            [props.isMenuPrimaryAction ? 'onPress' : 'onLongPress']:this._handleOnLongPress
+          })}
           activeOpacity={0.8}
           {...props.viewProps}
         >
diff --git a/node_modules/react-native-ios-context-menu/src/components/ContextMenuButton/ContextMenuButtonTypes.tsx b/node_modules/react-native-ios-context-menu/src/components/ContextMenuButton/ContextMenuButtonTypes.tsx
index da57e78..bd122c3 100644
--- a/node_modules/react-native-ios-context-menu/src/components/ContextMenuButton/ContextMenuButtonTypes.tsx
+++ b/node_modules/react-native-ios-context-menu/src/components/ContextMenuButton/ContextMenuButtonTypes.tsx
@@ -7,6 +7,7 @@ export type ContextMenuButtonBaseProps = Pick<RNIContextMenuButtonBaseProps,
   | 'enableContextMenu'
   | 'isMenuPrimaryAction'
   | 'menuConfig'
+  | 'menuAlignmentOverride'
   // Lifecycle Events
   | 'onMenuWillShow'
   | 'onMenuWillHide'
diff --git a/node_modules/react-native-ios-context-menu/src/native_components/RNIContextMenuButton.ts b/node_modules/react-native-ios-context-menu/src/native_components/RNIContextMenuButton.ts
index a609a8a..0acf10b 100644
--- a/node_modules/react-native-ios-context-menu/src/native_components/RNIContextMenuButton.ts
+++ b/node_modules/react-native-ios-context-menu/src/native_components/RNIContextMenuButton.ts
@@ -4,6 +4,7 @@ import type { RNIContextMenuViewProps } from './RNIContextMenuView';
 
 export type RNIContextMenuButtonBaseProps = Pick<RNIContextMenuViewProps,
   | 'menuConfig'
+  | 'menuAlignmentOverride'
   // Lifecycle Events
   | 'onMenuWillShow'
   | 'onMenuWillHide'
diff --git a/node_modules/react-native-ios-context-menu/src/native_components/RNIContextMenuView.ts b/node_modules/react-native-ios-context-menu/src/native_components/RNIContextMenuView.ts
index 0ee1daf..6cf23bf 100644
--- a/node_modules/react-native-ios-context-menu/src/native_components/RNIContextMenuView.ts
+++ b/node_modules/react-native-ios-context-menu/src/native_components/RNIContextMenuView.ts
@@ -12,6 +12,7 @@ export type RNIContextMenuViewProps = ViewProps & {
   // -----------
 
   menuConfig?: MenuConfig;
+  menuAlignmentOverride?: 'left' | 'right';
   previewConfig?: MenuPreviewConfig;
 
   /** 
