diff --git a/node_modules/recyclerlistview/dist/reactnative/core/ViewabilityTracker.js b/node_modules/recyclerlistview/dist/reactnative/core/ViewabilityTracker.js
index f5634e7..3910c48 100644
--- a/node_modules/recyclerlistview/dist/reactnative/core/ViewabilityTracker.js
+++ b/node_modules/recyclerlistview/dist/reactnative/core/ViewabilityTracker.js
@@ -37,7 +37,7 @@ var ViewabilityTracker = /** @class */ (function () {
         this._windowBound = isHorizontal ? dimension.width : dimension.height;
     };
     ViewabilityTracker.prototype.forceRefresh = function () {
-        var shouldForceScroll = this._currentOffset >= (this._maxOffset - this._windowBound);
+        var shouldForceScroll = false;
         this.forceRefreshWithOffset(this._currentOffset);
         return shouldForceScroll;
     };
diff --git a/node_modules/recyclerlistview/dist/reactnative/core/viewrenderer/BaseViewRenderer.js b/node_modules/recyclerlistview/dist/reactnative/core/viewrenderer/BaseViewRenderer.js
index c986cd8..f5519cc 100644
--- a/node_modules/recyclerlistview/dist/reactnative/core/viewrenderer/BaseViewRenderer.js
+++ b/node_modules/recyclerlistview/dist/reactnative/core/viewrenderer/BaseViewRenderer.js
@@ -28,7 +28,8 @@ var BaseViewRenderer = /** @class */ (function (_super) {
         var hasInternalSnapshotChanged = this.props.internalSnapshot !== newProps.internalSnapshot;
         var hasDataChanged = (this.props.dataHasChanged && this.props.dataHasChanged(this.props.data, newProps.data));
         var shouldUpdate = hasSizeChanged || hasDataChanged || hasExtendedStateChanged || hasInternalSnapshotChanged;
-        if (shouldUpdate) {
+        var isTooBigFamilyToAnimate = this.props.data.item?.childrenAmount > 50;
+        if (hasSizeChanged && !hasMoved && !isTooBigFamilyToAnimate) {
             newProps.itemAnimator.animateWillUpdate(this.props.x, this.props.y, newProps.x, newProps.y, this.getRef(), newProps.index);
         }
         else if (hasMoved) {
