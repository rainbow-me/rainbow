diff --git a/node_modules/react-native-reanimated/src/Animated.js b/node_modules/react-native-reanimated/src/Animated.js
index 523853a..d7813c3 100644
--- a/node_modules/react-native-reanimated/src/Animated.js
+++ b/node_modules/react-native-reanimated/src/Animated.js
@@ -81,7 +81,7 @@ export * from './derived';
 export * from './reanimated2';
 
 export {
-  EasingNode,
+  EasingNode as Easing,
   Transitioning,
   Transition,
   createTransitioningComponent,
diff --git a/node_modules/react-native-reanimated/src/derived/index.js b/node_modules/react-native-reanimated/src/derived/index.js
index e6e1541..943d1b6 100644
--- a/node_modules/react-native-reanimated/src/derived/index.js
+++ b/node_modules/react-native-reanimated/src/derived/index.js
@@ -2,7 +2,7 @@ export { default as acc } from './acc';
 export { default as color } from './color';
 export { default as diff } from './diff';
 export { default as diffClamp } from './diffClamp';
-export { default as interpolateNode, Extrapolate } from './interpolate';
+export { default as interpolateNode, default as interpolate, Extrapolate } from './interpolate';
 export { default as interpolateColors } from './interpolateColors';
 export { default as onChange } from './onChange';
 export { default as useCode } from './useCode';
diff --git a/node_modules/react-native-reanimated/src/reanimated2/Easing.js b/node_modules/react-native-reanimated/src/reanimated2/Easing.js
index 48a3c76..0723069 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/Easing.js
+++ b/node_modules/react-native-reanimated/src/reanimated2/Easing.js
@@ -235,7 +235,7 @@ function inOut(easing) {
   };
 }
 
-export const Easing = {
+export const NewEasing = {
   linear,
   ease,
   quad,
diff --git a/node_modules/react-native-reanimated/src/reanimated2/Hooks.js b/node_modules/react-native-reanimated/src/reanimated2/Hooks.js
index c18bd6c..708d5c9 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/Hooks.js
+++ b/node_modules/react-native-reanimated/src/reanimated2/Hooks.js
@@ -6,14 +6,28 @@ import updateProps from './UpdateProps';
 import { initialUpdaterRun } from './animations';
 import { getTag } from './NativeMethods';
 
-export function useSharedValue(init) {
+let globalVarsStore = {}
+
+export function releaseStore() {
+  globalVarsStore = {}
+}
+
+export function useSharedValue(init, name) {
   const ref = useRef(null);
   if (ref.current === null) {
+    let mutable
+    if (name) {
+      globalVarsStore[name] = globalVarsStore[name] || makeMutable(init)
+      globalVarsStore[name].value = init;
+      mutable = globalVarsStore[name];
+    } else {
+      mutable = makeMutable(init)
+    }
     ref.current = {
-      mutable: makeMutable(init),
+      mutable,
       last: init,
     };
-  } else if (init !== ref.current.last) {
+  } else if (init !== ref.current.last && !(Array.isArray(init) && init.length === 0 && Array.isArray(ref.current.last) && ref.current.last.length === 0)) {
     ref.current.last = init;
     ref.current.mutable.value = init;
   }
@@ -21,11 +35,20 @@ export function useSharedValue(init) {
   return ref.current.mutable;
 }
 
-export function useMapper(fun, inputs = [], outputs = [], dependencies = []) {
+export function useMapper(fun, inputs = [], outputs = [], dependencies = [], name) {
   useEffect(() => {
     const mapperId = startMapper(fun, inputs, outputs);
+    if (name) {
+      const oldMapper = globalVarsStore[name + '--mapper'];
+      if (oldMapper) {
+        stopMapper(mapperId);
+      }
+      globalVarsStore[name + '--mapper'] = mapperId
+    }
     return () => {
-      stopMapper(mapperId);
+      if (!name) {
+        stopMapper(mapperId);
+      }
     };
   }, dependencies);
 }
@@ -256,8 +279,8 @@ function styleUpdater(viewTag, updater, state) {
   }
 }
 
-export function useAnimatedStyle(updater, dependencies) {
-  const viewTag = useSharedValue(-1);
+export function useAnimatedStyle(updater, dependencies, name) {
+  const viewTag = useSharedValue(-1, name);
   const initRef = useRef(null);
   const inputs = Object.values(updater._closure);
 
@@ -283,9 +306,21 @@ export function useAnimatedStyle(updater, dependencies) {
       'worklet';
       styleUpdater(viewTag, updater, remoteState);
     };
-    const mapperId = startMapper(fun, inputs, []);
+    let mapperId
+    if (name) {
+      const oldMapper = globalVarsStore[name + '--mapper'];
+      if (oldMapper) {
+        stopMapper(oldMapper)
+      }
+      mapperId = startMapper(fun, inputs, []);
+      globalVarsStore[name + '--mapper'] = mapperId;
+    } else {
+      mapperId = startMapper(fun, inputs, []);
+    }
     return () => {
-      stopMapper(mapperId);
+      if (!name) {
+        stopMapper(mapperId);
+      }
     };
   }, dependencies);
 
@@ -315,7 +350,7 @@ export function useAnimatedStyle(updater, dependencies) {
 // when you need styles to animated you should always use useAS
 export const useAnimatedProps = useAnimatedStyle;
 
-export function useDerivedValue(processor, dependencies) {
+export function useDerivedValue(processor, dependencies, name) {
   const initRef = useRef(null);
   const inputs = Object.values(processor._closure);
 
@@ -338,11 +373,21 @@ export function useDerivedValue(processor, dependencies) {
       sharedValue.value = processor();
     };
     const mapperId = startMapper(fun, inputs, [sharedValue]);
+    if (name) {
+      const oldMapper = globalVarsStore[name + '---mapper'];
+      if (oldMapper) {
+        stopMapper(mapperId);
+      }
+      globalVarsStore[name + '---mapper'] = mapperId
+    }
     return () => {
-      stopMapper(mapperId);
+      if (!name) {
+        stopMapper(mapperId);
+      }
     };
   }, dependencies);
 
+
   return sharedValue;
 }
 
diff --git a/node_modules/react-native-reanimated/src/reanimated2/animations.js b/node_modules/react-native-reanimated/src/reanimated2/animations.js
index 9abd097..87443af 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/animations.js
+++ b/node_modules/react-native-reanimated/src/reanimated2/animations.js
@@ -1,5 +1,5 @@
 /* global _WORKLET */
-import { Easing } from './Easing';
+import { NewEasing as Easing } from './Easing';
 
 let IN_STYLE_UPDATER = false;
 
diff --git a/node_modules/react-native-reanimated/src/reanimated2/interpolation.js b/node_modules/react-native-reanimated/src/reanimated2/interpolation.js
index fc43c60..920eaa9 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/interpolation.js
+++ b/node_modules/react-native-reanimated/src/reanimated2/interpolation.js
@@ -28,7 +28,7 @@ function internalInterpolate(x, l, r, ll, rr, type) {
   return val;
 }
 
-export function interpolate(x, input, output, type) {
+export function newInterpolate(x, input, output, type) {
   'worklet';
   if (x && x.__nodeID) {
     throw new Error(
