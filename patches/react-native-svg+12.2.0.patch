diff --git a/node_modules/react-native-svg/apple/Elements/RNSVGGroup.m b/node_modules/react-native-svg/apple/Elements/RNSVGGroup.m
index 0322c7c..6ed5ede 100644
--- a/node_modules/react-native-svg/apple/Elements/RNSVGGroup.m
+++ b/node_modules/react-native-svg/apple/Elements/RNSVGGroup.m
@@ -148,7 +148,6 @@ - (CGPathRef)getPath:(CGContextRef)context
     [self traverseSubviews:^(RNSVGNode *node) {
         if ([node isKindOfClass:[RNSVGNode class]] && ![node isKindOfClass:[RNSVGMask class]]) {
             CGAffineTransform transform = CGAffineTransformConcat(node.matrix, node.transforms);
-            CGPathAddPath(path, &transform, [node getPath:context]);
             CGPathAddPath(path, &transform, [node markerPath]);
             node.dirty = false;
         }
diff --git a/node_modules/react-native-svg/apple/RNSVGRenderable.m b/node_modules/react-native-svg/apple/RNSVGRenderable.m
index 03c9789..5534a93 100644
--- a/node_modules/react-native-svg/apple/RNSVGRenderable.m
+++ b/node_modules/react-native-svg/apple/RNSVGRenderable.m
@@ -374,6 +374,7 @@ - (void)renderLayerTo:(CGContextRef)context rect:(CGRect)rect
     if (_vectorEffect == kRNSVGVectorEffectNonScalingStroke) {
         path = CGPathCreateCopyByTransformingPath(path, &svgToClientTransform);
         CGContextConcatCTM(context, CGAffineTransformInvert(svgToClientTransform));
+        CFAutorelease(path);
     }
 
     CGAffineTransform vbmatrix = self.svgView.getViewBoxTransform;
diff --git a/node_modules/react-native-svg/src/index.d.ts b/node_modules/react-native-svg/src/index.d.ts
index 7f4d152..113ece9 100644
--- a/node_modules/react-native-svg/src/index.d.ts
+++ b/node_modules/react-native-svg/src/index.d.ts
@@ -529,6 +529,11 @@ export interface AST {
   Tag: React.ComponentType;
 }
 
+export type AdditionalProps = {
+  onError?: (error: Error) => void;
+  override?: AdditionalProps;
+} & SvgProps;
+
 export interface XmlAST extends AST {
   children: (XmlAST | string)[];
   parent: XmlAST | null;
@@ -538,21 +543,18 @@ export interface JsxAST extends AST {
   children: (JSX.Element | string)[];
 }
 
-export interface UriProps extends SvgProps {
+export interface UriProps extends AdditionalProps {
   uri: string | null;
-  override?: SvgProps;
 }
 export type UriState = { xml: string | null };
 
-export interface XmlProps extends SvgProps {
+export interface XmlProps extends AdditionalProps {
   xml: string | null;
-  override?: SvgProps;
 }
 export type XmlState = { ast: JsxAST | null };
 
-export interface AstProps extends SvgProps {
+export interface AstProps extends AdditionalProps {
   ast: JsxAST | null;
-  override?: SvgProps;
 }
 
 export type Middleware = (ast: XmlAST) => XmlAST;
diff --git a/node_modules/react-native-svg/src/xml.tsx b/node_modules/react-native-svg/src/xml.tsx
index 828f104..d9fc8d7 100644
--- a/node_modules/react-native-svg/src/xml.tsx
+++ b/node_modules/react-native-svg/src/xml.tsx
@@ -83,7 +83,7 @@ export interface JsxAST extends AST {
 
 export type AdditionalProps = {
   onError?: (error: Error) => void;
-  override?: Object;
+  override?: AdditionalProps;
 };
 
 export type UriProps = { uri: string | null } & AdditionalProps;
@@ -109,13 +109,24 @@ export function SvgAst({ ast, override }: AstProps) {
 export const err = console.error.bind(console);
 
 export function SvgXml(props: XmlProps) {
-  const { onError = err, xml, override } = props;
-  const ast = useMemo<JsxAST | null>(() => (xml !== null ? parse(xml) : null), [
+  const { xml } = props;
+  const onError = props.onError || props.override?.onError || err;
+  const ast = useMemo<JsxAST | null>(() => {
+    try {
+      return xml !== null ? parse(xml) : null;
+    } catch (e) {
+      if (!!onError) {
+        onError(e);
+      }
+      return null;
+    }
+  }, [
     xml,
+    onError
   ]);
 
   try {
-    return <SvgAst ast={ast} override={override || props} />;
+    return <SvgAst ast={ast} override={props.override || props} />;
   } catch (error) {
     onError(error);
     return null;
@@ -133,8 +144,8 @@ export function SvgUri(props: UriProps) {
   useEffect(() => {
     uri
       ? fetchText(uri)
-          .then(setXml)
-          .catch(onError)
+      .then(setXml)
+      .catch(onError)
       : setXml(null);
   }, [onError, uri]);
   return <SvgXml xml={xml} override={props} />;
@@ -155,9 +166,13 @@ export class SvgFromXml extends Component<XmlProps, XmlState> {
   }
   parse(xml: string | null) {
     try {
-      this.setState({ ast: xml ? parse(xml) : null });
+      const ast = xml ? parse(xml) : null;
+      this.setState({ ast });
     } catch (e) {
-      console.error(e);
+      const onError = this.props.onError || this.props.override?.onError || err;
+      if (!!onError) {
+        onError(e);
+      }
     }
   }
   render() {
@@ -222,7 +237,7 @@ export function getStyle(string: string): Styles {
 export function astToReact(
   value: AST | string,
   index: number,
-): JSX.Element | string {
+): JSX.Element | string | null {
   if (typeof value === 'object') {
     const { Tag, props, children } = value;
     return (
@@ -231,7 +246,7 @@ export function astToReact(
       </Tag>
     );
   }
-  return value;
+  return null;
 }
 
 // slimmed down parser based on https://github.com/Rich-Harris/svg-parser
diff --git a/node_modules/react-native-svg/package.json b/node_modules/react-native-svg/package.json
index fa71673..6ed5ede 100644
--- a/node_modules/react-native-svg/package.json
+++ b/node_modules/react-native-svg/package.json
@@ -8,10 +8,9 @@
     "url": "https://github.com/react-native-community/react-native-svg"
   },
   "license": "MIT",
-  "main": "lib/commonjs/index.js",
-  "module": "lib/module/index.js",
+  "main": "src/index.ts",
+  "module": "src/index.ts",
   "react-native": {
-    "lib/commonjs/index.js": "src/index.ts",
     "zlib": "browserify-zlib",
     "console": "console-browserify",
     "constants": "constants-browserify",
@@ -131,7 +130,6 @@
   },
   "nativePackage": true,
   "browser": {
-    "lib/commonjs/index.js": "src/index.ts",
     "zlib": "browserify-zlib",
     "console": "console-browserify",
     "constants": "constants-browserify",
