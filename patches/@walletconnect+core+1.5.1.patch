diff --git a/node_modules/@walletconnect/core/dist/cjs/index.js b/node_modules/@walletconnect/core/dist/cjs/index.js
index 50bc485..200984b 100644
--- a/node_modules/@walletconnect/core/dist/cjs/index.js
+++ b/node_modules/@walletconnect/core/dist/cjs/index.js
@@ -24,7 +24,7 @@ class Connector {
         this._chainId = 0;
         this._networkId = 0;
         this._rpcUrl = "";
-        this._eventManager = new events_1.default();
+        this?._eventManager? = new events_1.default();
         this._clientMeta = utils_1.getClientMeta() || opts.connectorOpts.clientMeta || null;
         this._cryptoLib = opts.cryptoLib;
         this._sessionStorage = opts.sessionStorage || new storage_1.default(opts.connectorOpts.storageId);
@@ -230,10 +230,10 @@ class Connector {
             event,
             callback,
         };
-        this._eventManager.subscribe(eventEmitter);
+        this?._eventManager?.subscribe(eventEmitter);
     }
     off(event) {
-        this._eventManager.unsubscribe(event);
+        this?._eventManager?.unsubscribe(event);
     }
     createInstantRequest(instantRequest) {
         return tslib_1.__awaiter(this, void 0, void 0, function* () {
@@ -250,7 +250,7 @@ class Connector {
             });
             this.handshakeId = request.id;
             this.handshakeTopic = utils_1.uuid();
-            this._eventManager.trigger({
+            this?._eventManager?.trigger({
                 event: "display_uri",
                 params: [this.uri],
             });
@@ -320,7 +320,7 @@ class Connector {
             this._sendSessionRequest(request, "Session update rejected", {
                 topic: this.handshakeTopic,
             });
-            this._eventManager.trigger({
+            this?._eventManager?.trigger({
                 event: "display_uri",
                 params: [this.uri],
             });
@@ -351,7 +351,7 @@ class Connector {
         this._sendResponse(response);
         this._connected = true;
         this._setStorageSession();
-        this._eventManager.trigger({
+        this?._eventManager?.trigger({
             event: "connect",
             params: [
                 {
@@ -374,7 +374,7 @@ class Connector {
         });
         this._sendResponse(response);
         this._connected = false;
-        this._eventManager.trigger({
+        this?._eventManager?.trigger({
             event: "disconnect",
             params: [{ message }],
         });
@@ -400,7 +400,7 @@ class Connector {
             params: [sessionParams],
         });
         this._sendSessionRequest(request, "Session update rejected");
-        this._eventManager.trigger({
+        this?._eventManager?.trigger({
             event: "session_update",
             params: [
                 {
@@ -603,7 +603,7 @@ class Connector {
     }
     _sendCallRequest(request, options) {
         this._sendRequest(request, options);
-        this._eventManager.trigger({
+        this?._eventManager?.trigger({
             event: "call_request_sent",
             params: [{ request, options }],
         });
@@ -660,7 +660,7 @@ class Connector {
         if (this._handshakeTopic) {
             this._handshakeTopic = "";
         }
-        this._eventManager.trigger({
+        this?._eventManager?.trigger({
             event: "disconnect",
             params: [{ message }],
         });
@@ -684,7 +684,7 @@ class Connector {
                     if (sessionParams.peerMeta && !this.peerMeta) {
                         this.peerMeta = sessionParams.peerMeta;
                     }
-                    this._eventManager.trigger({
+                    this?._eventManager?.trigger({
                         event: "connect",
                         params: [
                             {
@@ -703,7 +703,7 @@ class Connector {
                     if (sessionParams.accounts) {
                         this.accounts = sessionParams.accounts;
                     }
-                    this._eventManager.trigger({
+                    this?._eventManager?.trigger({
                         event: "session_update",
                         params: [
                             {
@@ -738,7 +738,7 @@ class Connector {
             }
             const payload = yield this._decrypt(encryptionPayload);
             if (payload) {
-                this._eventManager.trigger(payload);
+                this?._eventManager?.trigger(payload);
             }
         });
     }
@@ -788,7 +788,7 @@ class Connector {
         this.on("display_uri", () => {
             if (this._qrcodeModal) {
                 this._qrcodeModal.open(this.uri, () => {
-                    this._eventManager.trigger({
+                    this?._eventManager?.trigger({
                         event: "modal_closed",
                         params: [],
                     });
@@ -802,7 +802,7 @@ class Connector {
         });
         this.on("wc_sessionRequest", (error, payload) => {
             if (error) {
-                this._eventManager.trigger({
+                this?._eventManager?.trigger({
                     event: "error",
                     params: [
                         {
@@ -816,7 +816,7 @@ class Connector {
             this.peerId = payload.params[0].peerId;
             this.peerMeta = payload.params[0].peerMeta;
             const internalPayload = Object.assign(Object.assign({}, payload), { method: "session_request" });
-            this._eventManager.trigger(internalPayload);
+            this?._eventManager?.trigger(internalPayload);
         });
         this.on("wc_sessionUpdate", (error, payload) => {
             if (error) {
@@ -827,9 +827,9 @@ class Connector {
     }
     _initTransport() {
         this._transport.on("message", (socketMessage) => this._handleIncomingMessages(socketMessage));
-        this._transport.on("open", () => this._eventManager.trigger({ event: "transport_open", params: [] }));
-        this._transport.on("close", () => this._eventManager.trigger({ event: "transport_close", params: [] }));
-        this._transport.on("error", () => this._eventManager.trigger({
+        this._transport.on("open", () => this?._eventManager?.trigger({ event: "transport_open", params: [] }));
+        this._transport.on("close", () => this?._eventManager?.trigger({ event: "transport_close", params: [] }));
+        this._transport.on("error", () => this?._eventManager?.trigger({
             event: "transport_error",
             params: ["Websocket connection failed"],
         }));
