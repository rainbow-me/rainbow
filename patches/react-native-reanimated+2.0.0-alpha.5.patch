diff --git a/node_modules/react-native-reanimated/Common/cpp/SharedItems/MutableValue.cpp b/node_modules/react-native-reanimated/Common/cpp/SharedItems/MutableValue.cpp
index 364631c..663363d 100644
--- a/node_modules/react-native-reanimated/Common/cpp/SharedItems/MutableValue.cpp
+++ b/node_modules/react-native-reanimated/Common/cpp/SharedItems/MutableValue.cpp
@@ -8,8 +8,9 @@ namespace reanimated {
 void MutableValue::setValue(jsi::Runtime &rt, const jsi::Value &newValue) {
   std::lock_guard<std::mutex> lock(readWriteMutex);
   value = ShareableValue::adapt(rt, newValue, module);
-  auto notifyListeners = [this] () {
-    for (auto listener : listeners) {
+  std::shared_ptr<MutableValue> thiz = shared_from_this();
+  auto notifyListeners = [thiz] () {
+    for (auto listener : thiz->listeners) {
       listener.second();
     }
   };
@@ -87,18 +88,18 @@ std::vector<jsi::PropNameID> MutableValue::getPropertyNames(jsi::Runtime &rt) {
 }
 
 MutableValue::MutableValue(jsi::Runtime &rt, const jsi::Value &initial, NativeReanimatedModule *module):
-module(module), value(ShareableValue::adapt(rt, initial, module)) {}
+module(module), value(ShareableValue::adapt(rt, initial, module)) {
+}
 
-unsigned long int MutableValue::addListener(std::function<void ()> listener) {
-  unsigned long id = listeners.size() + 1;
-  listeners.push_back(std::make_pair(id, listener));
+unsigned long int MutableValue::addListener(unsigned long id, std::function<void ()> listener) {
+  listeners[id] = listener;
   return id;
 }
 
 void MutableValue::removeListener(unsigned long listenerId) {
-  listeners.erase(std::remove_if(listeners.begin(), listeners.end(), [=](const std::pair<unsigned long, std::function<void()>>& pair) {
-    return pair.first == listenerId;
-  }), listeners.end());
+  if (listeners.count(listenerId) > 0) {
+    listeners.erase(listenerId);
+  }
 }
 
 
diff --git a/node_modules/react-native-reanimated/Common/cpp/Tools/Mapper.cpp b/node_modules/react-native-reanimated/Common/cpp/Tools/Mapper.cpp
index 9a62000..59c7690 100644
--- a/node_modules/react-native-reanimated/Common/cpp/Tools/Mapper.cpp
+++ b/node_modules/react-native-reanimated/Common/cpp/Tools/Mapper.cpp
@@ -19,7 +19,7 @@ outputs(outputs) {
     module->maybeRequestRender();
   };
   for (auto input : inputs) {
-    input->addListener(markDirty);
+    input->addListener(id, markDirty);
   }
 }
 
@@ -28,4 +28,10 @@ void Mapper::execute(jsi::Runtime &rt) {
   mapper.callWithThis(rt, mapper);
 }
 
+Mapper::~Mapper() {
+  for (auto input : inputs) {
+    input->removeListener(id);
+  }
+}
+
 }
diff --git a/node_modules/react-native-reanimated/Common/cpp/headers/SharedItems/MutableValue.h b/node_modules/react-native-reanimated/Common/cpp/headers/SharedItems/MutableValue.h
index b83db7a..f665a3f 100644
--- a/node_modules/react-native-reanimated/Common/cpp/headers/SharedItems/MutableValue.h
+++ b/node_modules/react-native-reanimated/Common/cpp/headers/SharedItems/MutableValue.h
@@ -4,6 +4,7 @@
 #include <jsi/jsi.h>
 #include "SharedParent.h"
 #include "MutableValueSetterProxy.h"
+#include <map>
 
 namespace reanimated {
 
@@ -17,7 +18,7 @@ class MutableValue : public jsi::HostObject, public std::enable_shared_from_this
   std::shared_ptr<ShareableValue> value;
   jsi::Value setter;
   jsi::Value animation;
-  std::vector<std::pair<unsigned long, std::function<void()>>> listeners;
+  std::map<unsigned long, std::function<void()>> listeners;
 
   void setValue(jsi::Runtime &rt, const jsi::Value &newValue);
   jsi::Value getValue(jsi::Runtime &rt);
@@ -29,7 +30,7 @@ class MutableValue : public jsi::HostObject, public std::enable_shared_from_this
   void set(jsi::Runtime &rt, const jsi::PropNameID &name, const jsi::Value &value);
   jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &name);
   std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime &rt);
-  unsigned long addListener(std::function<void()> listener);
+  unsigned long addListener(unsigned long listenerId, std::function<void()> listener);
   void removeListener(unsigned long listenerId);
 };
 
diff --git a/node_modules/react-native-reanimated/Common/cpp/headers/Tools/Mapper.h b/node_modules/react-native-reanimated/Common/cpp/headers/Tools/Mapper.h
index f105265..59be99f 100644
--- a/node_modules/react-native-reanimated/Common/cpp/headers/Tools/Mapper.h
+++ b/node_modules/react-native-reanimated/Common/cpp/headers/Tools/Mapper.h
@@ -11,7 +11,7 @@ using namespace facebook;
 
 class MapperRegistry;
 
-class Mapper {
+class Mapper : public std::enable_shared_from_this<Mapper> {
   friend MapperRegistry;
 private:
   unsigned long id;
@@ -28,6 +28,7 @@ public:
          std::vector<std::shared_ptr<MutableValue>> inputs,
          std::vector<std::shared_ptr<MutableValue>> outputs);
   void execute(jsi::Runtime &rt);
+  virtual ~Mapper();
 };
 
 }
diff --git a/node_modules/react-native-reanimated/src/Animated.js b/node_modules/react-native-reanimated/src/Animated.js
index 27de367..a5e758a 100644
--- a/node_modules/react-native-reanimated/src/Animated.js
+++ b/node_modules/react-native-reanimated/src/Animated.js
@@ -74,7 +74,7 @@ export * from './derived';
 export * from './reanimated2';
 
 export {
-  EasingNode,
+  EasingNode as Easing,
   Transitioning,
   Transition,
   createTransitioningComponent,
diff --git a/node_modules/react-native-reanimated/src/derived/index.js b/node_modules/react-native-reanimated/src/derived/index.js
index e6e1541..86fd5c7 100644
--- a/node_modules/react-native-reanimated/src/derived/index.js
+++ b/node_modules/react-native-reanimated/src/derived/index.js
@@ -2,7 +2,8 @@ export { default as acc } from './acc';
 export { default as color } from './color';
 export { default as diff } from './diff';
 export { default as diffClamp } from './diffClamp';
-export { default as interpolateNode, Extrapolate } from './interpolate';
+export { default as interpolate, default as interpolateNode, Extrapolate } from './interpolate';
 export { default as interpolateColors } from './interpolateColors';
 export { default as onChange } from './onChange';
 export { default as useCode } from './useCode';
+
diff --git a/node_modules/react-native-reanimated/src/reanimated2/Easing.js b/node_modules/react-native-reanimated/src/reanimated2/Easing.js
index 48a3c76..0723069 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/Easing.js
+++ b/node_modules/react-native-reanimated/src/reanimated2/Easing.js
@@ -235,7 +235,7 @@ function inOut(easing) {
   };
 }
 
-export const Easing = {
+export const NewEasing = {
   linear,
   ease,
   quad,
diff --git a/node_modules/react-native-reanimated/src/reanimated2/Hooks.js b/node_modules/react-native-reanimated/src/reanimated2/Hooks.js
index c14ec0b..ffa8555 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/Hooks.js
+++ b/node_modules/react-native-reanimated/src/reanimated2/Hooks.js
@@ -6,19 +6,41 @@ import updateProps from './UpdateProps';
 import { initialUpdaterRun } from './animations';
 import { getTag } from './NativeMethods'
 
-export function useSharedValue(init) {
+let globalVarsStore = {}
+
+export function releaseStore() {
+  globalVarsStore = {}
+  return
+}
+
+export function useSharedValue(init, name) {
   const ref = useRef(null);
   if (ref.current === null) {
-    ref.current = makeMutable(init);
+    if (name) {
+      globalVarsStore[name] = globalVarsStore[name] || makeMutable(init)
+      globalVarsStore[name].value = init;
+      ref.current = globalVarsStore[name];
+    } else {
+      ref.current = makeMutable(init)
+    }
   }
   return ref.current;
 }
 
-export function useMapper(fun, inputs = [], outputs = []) {
+export function useMapper(fun, inputs = [], outputs = [], name) {
   useEffect(() => {
-    const mapperId = startMapper(fun, inputs, outputs);
+    let mappe3rId
+    if (name && false) {
+      globalVarsStore[name] = globalVarsStore[name] || startMapper(fun, inputs, outputs)
+      let mapperId = globalVarsStore[name];
+    } else {
+      mapperId = startMapper(fun, inputs, outputs);
+    }
+
     return () => {
-      stopMapper(mapperId);
+      if (!name) {
+        stopMapper(mapperId);
+      }
     };
   }, []);
 }
@@ -250,8 +272,8 @@ function styleUpdater(viewTag, updater, state) {
   }
 }
 
-export function useAnimatedStyle(updater) {
-  const viewTag = useSharedValue(-1);
+export function useAnimatedStyle(updater, name) {
+  const viewTag = useSharedValue(-1, name);
 
   const initRef = useRef(null);
   if (initRef.current === null) {
@@ -267,7 +289,7 @@ export function useAnimatedStyle(updater) {
   useMapper(() => {
     'worklet';
     styleUpdater(viewTag, updater, remoteState);
-  }, inputs);
+  }, inputs, [], name ? name + '_mapper' : '');
 
   let wrongKey;
   const isError = Object.keys(initial).some((key) => {
@@ -294,7 +316,7 @@ export function useAnimatedStyle(updater) {
 // when you need styles to animated you should always use useAS
 export const useAnimatedProps = useAnimatedStyle;
 
-export function useDerivedValue(processor) {
+export function useDerivedValue(processor, name) {
   const initRef = useRef(null);
   if (initRef.current === null) {
     initRef.current = {
@@ -311,7 +333,8 @@ export function useDerivedValue(processor) {
       sharedValue.value = processor();
     },
     inputs,
-    [sharedValue]
+    [sharedValue],
+    name
   );
 
   return sharedValue;
@@ -331,13 +354,18 @@ export function useAnimatedGestureHandler(handlers) {
       'worklet';
       const UNDETERMINED = 0;
       const FAILED = 1;
+      const BEGAN = 2;
       const CANCELLED = 3;
       const ACTIVE = 4;
       const END = 5;
 
-      if (event.oldState === UNDETERMINED && handlers.onStart) {
+      if (
+        (event.oldState === UNDETERMINED || event.oldState === END) &&
+        handlers.onStart
+      ) {
         handlers.onStart(event, context);
       }
+
       if (event.state === ACTIVE && handlers.onActive) {
         handlers.onActive(event, context);
       }
@@ -345,14 +373,14 @@ export function useAnimatedGestureHandler(handlers) {
         handlers.onEnd(event, context);
       }
       if (
-        event.oldState === ACTIVE &&
+        (event.oldState === ACTIVE || event.oldState === BEGAN) &&
         event.state === FAILED &&
         handlers.onFail
       ) {
         handlers.onFail(event, context);
       }
       if (
-        event.oldState === ACTIVE &&
+        event.oldState === ACTIVE  &&
         event.state === CANCELLED &&
         handlers.onCancel
       ) {
diff --git a/node_modules/react-native-reanimated/src/reanimated2/animations.js b/node_modules/react-native-reanimated/src/reanimated2/animations.js
index c433775..d01f3a4 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/animations.js
+++ b/node_modules/react-native-reanimated/src/reanimated2/animations.js
@@ -1,5 +1,5 @@
 /* global _WORKLET */
-import { Easing } from './Easing';
+import { NewEasing as Easing } from './Easing';
 
 let IN_STYLE_UPDATER = false;
 
diff --git a/node_modules/react-native-reanimated/src/reanimated2/interpolation.js b/node_modules/react-native-reanimated/src/reanimated2/interpolation.js
index fc43c60..920eaa9 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/interpolation.js
+++ b/node_modules/react-native-reanimated/src/reanimated2/interpolation.js
@@ -28,7 +28,7 @@ function internalInterpolate(x, l, r, ll, rr, type) {
   return val;
 }
 
-export function interpolate(x, input, output, type) {
+export function newInterpolate(x, input, output, type) {
   'worklet';
   if (x && x.__nodeID) {
     throw new Error(
