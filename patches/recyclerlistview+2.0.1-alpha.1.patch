diff --git a/node_modules/recyclerlistview/dist/reactnative/core/ViewabilityTracker.js b/node_modules/recyclerlistview/dist/reactnative/core/ViewabilityTracker.js
index 26e19af..e2a2913 100644
--- a/node_modules/recyclerlistview/dist/reactnative/core/ViewabilityTracker.js
+++ b/node_modules/recyclerlistview/dist/reactnative/core/ViewabilityTracker.js
@@ -36,9 +36,8 @@ var ViewabilityTracker = /** @class */ (function () {
         this._windowBound = isHorizontal ? dimension.width : dimension.height;
     };
     ViewabilityTracker.prototype.forceRefresh = function () {
-        var shouldForceScroll = this._currentOffset >= (this._maxOffset - this._windowBound);
         this.forceRefreshWithOffset(this._currentOffset);
-        return shouldForceScroll;
+        return false;
     };
     ViewabilityTracker.prototype.forceRefreshWithOffset = function (offset) {
         this._currentOffset = -1;
diff --git a/node_modules/recyclerlistview/dist/reactnative/core/StickyContainer.js b/node_modules/recyclerlistview/dist/reactnative/core/StickyContainer.js
index e3af431..8de1ec4 100644
--- a/node_modules/recyclerlistview/dist/reactnative/core/StickyContainer.js
+++ b/node_modules/recyclerlistview/dist/reactnative/core/StickyContainer.js
@@ -54,14 +54,14 @@ var StickyContainer = /** @class */ (function (_super) {
             }
         };
         _this._getStickyHeaderRef = function (stickyHeaderRef) {
-            if (!_this._stickyHeaderRef) {
+            if (_this._stickyHeaderRef !== stickyHeaderRef) {
                 _this._stickyHeaderRef = stickyHeaderRef;
                 // TODO: Resetting state once ref is initialized. Can look for better solution.
                 _this._callStickyObjectsOnVisibleIndicesChanged(_this._visibleIndicesAll);
             }
         };
         _this._getStickyFooterRef = function (stickyFooterRef) {
-            if (!_this._stickyFooterRef) {
+            if (_this._stickyFooterRef !== stickyFooterRef) {
                 _this._stickyFooterRef = stickyFooterRef;
                 // TODO: Resetting state once ref is initialized. Can look for better solution.
                 _this._callStickyObjectsOnVisibleIndicesChanged(_this._visibleIndicesAll);
diff --git a/node_modules/recyclerlistview/dist/reactnative/core/layoutmanager/LayoutManager.js b/node_modules/recyclerlistview/dist/reactnative/core/layoutmanager/LayoutManager.js
index 3851852..23075a0 100644
--- a/node_modules/recyclerlistview/dist/reactnative/core/layoutmanager/LayoutManager.js
+++ b/node_modules/recyclerlistview/dist/reactnative/core/layoutmanager/LayoutManager.js
@@ -172,6 +172,10 @@ var WrapGridLayoutManager = /** @class */ (function (_super) {
         }
         var i = startIndex - 1;
         for (; i >= 0; i--) {
+            if (!this._layouts[i]) {
+                console.warn("WrapGridLayoutManager layout at index", i, "does not exist"); //tslint:disable-line
+                continue;
+            }
             if (this._isHorizontal) {
                 if (this._layouts[i].y === 0) {
                     break;
diff --git a/node_modules/recyclerlistview/dist/reactnative/core/sticky/StickyHeader.js b/node_modules/recyclerlistview/dist/reactnative/core/sticky/StickyHeader.js
index 7074f36..5e72f6e 100644
--- a/node_modules/recyclerlistview/dist/reactnative/core/sticky/StickyHeader.js
+++ b/node_modules/recyclerlistview/dist/reactnative/core/sticky/StickyHeader.js
@@ -60,7 +60,7 @@ var StickyHeader = /** @class */ (function (_super) {
         return offsetY;
     };
     StickyHeader.prototype.hasReachedBoundary = function (offsetY, distanceFromWindow, _windowBound) {
-        return offsetY <= distanceFromWindow;
+        return offsetY < distanceFromWindow;
     };
     return StickyHeader;
 }(StickyObject_1.default));
diff --git a/node_modules/recyclerlistview/dist/reactnative/core/sticky/StickyObject.js b/node_modules/recyclerlistview/dist/reactnative/core/sticky/StickyObject.js
index 8da004f..417bf8c 100644
--- a/node_modules/recyclerlistview/dist/reactnative/core/sticky/StickyObject.js
+++ b/node_modules/recyclerlistview/dist/reactnative/core/sticky/StickyObject.js
@@ -32,6 +32,7 @@ var StickyObject = /** @class */ (function (_super) {
         _this.stickyType = StickyType.HEADER;
         _this.stickyTypeMultiplier = 1;
         _this.stickyVisiblity = false;
+        _this.visibility = false;
         _this.currentIndex = 0;
         _this.currentStickyIndex = 0;
         _this.visibleIndices = [];
@@ -44,7 +45,7 @@ var StickyObject = /** @class */ (function (_super) {
         _this._largestVisibleIndex = 0;
         _this._offsetY = 0;
         _this.state = {
-            visible: _this.stickyVisiblity,
+            visibility: true,
         };
         return _this;
     }
@@ -58,7 +59,7 @@ var StickyObject = /** @class */ (function (_super) {
         return (React.createElement(react_native_1.Animated.View, { style: [
                 { position: "absolute", width: this._scrollableWidth, transform: [{ translateY: this._stickyViewOffset }] },
                 this.containerPosition,
-            ] }, this.state.visible ?
+            ] }, this.visibility ?
             this._renderSticky()
             : null));
     };
@@ -74,6 +75,15 @@ var StickyObject = /** @class */ (function (_super) {
         this.stickyViewVisible(this.stickyVisiblity);
     };
     StickyObject.prototype.onScroll = function (offsetY) {
+        const prevVisibility = this.visibility;
+        if(offsetY < 0 && prevVisibility == true || this._smallestVisibleIndex < this.currentStickyIndex) {
+            this.visibility = false;
+        } else if (offsetY >= 0 && prevVisibility == false) {
+            this.visibility = true;
+        }
+        if(prevVisibility !== this.visibility) {
+            this.render();
+        }
         this._initParams();
         this._offsetY = offsetY;
         this.boundaryProcessing(offsetY, this.props.getDistanceFromWindow(), this._windowBound);
diff --git a/node_modules/recyclerlistview/dist/reactnative/utils/BinarySearch.js b/node_modules/recyclerlistview/dist/reactnative/utils/BinarySearch.js
index 0ad973f..74f37c5 100644
--- a/node_modules/recyclerlistview/dist/reactnative/utils/BinarySearch.js
+++ b/node_modules/recyclerlistview/dist/reactnative/utils/BinarySearch.js
@@ -74,7 +74,7 @@ var BinarySearch = /** @class */ (function () {
     BinarySearch.findValueSmallerThanTarget = function (values, target) {
         var low = 0;
         var high = values.length - 1;
-        if (target > values[high]) {
+        if (target >= values[high]) {
             return {
                 value: values[high],
                 index: high,
