diff --git a/node_modules/react-native-reanimated/Common/cpp/worklets/SharedItems/Shareables.cpp b/node_modules/react-native-reanimated/Common/cpp/worklets/SharedItems/Shareables.cpp
index 4087065..f22bd06 100644
--- a/node_modules/react-native-reanimated/Common/cpp/worklets/SharedItems/Shareables.cpp
+++ b/node_modules/react-native-reanimated/Common/cpp/worklets/SharedItems/Shareables.cpp
@@ -47,7 +47,12 @@ jsi::Value makeShareableClone(
   if (value.isObject()) {
     auto object = value.asObject(rt);
     if (!object.getProperty(rt, "__workletHash").isUndefined()) {
-      shareable = std::make_shared<ShareableWorklet>(rt, object);
+      if (shouldRetainRemote.isBool() && shouldRetainRemote.getBool()) {
+        shareable =
+            std::make_shared<RetainingShareable<ShareableWorklet>>(rt, object);
+      } else {
+        shareable = std::make_shared<ShareableWorklet>(rt, object);
+      }
     } else if (!object.getProperty(rt, "__init").isUndefined()) {
       shareable = std::make_shared<ShareableHandle>(rt, object);
     } else if (object.isFunction(rt)) {
diff --git a/node_modules/react-native-reanimated/apple/reanimated/apple/REANodesManager.mm b/node_modules/react-native-reanimated/apple/reanimated/apple/REANodesManager.mm
index ec86d08..b043442 100644
--- a/node_modules/react-native-reanimated/apple/reanimated/apple/REANodesManager.mm
+++ b/node_modules/react-native-reanimated/apple/reanimated/apple/REANodesManager.mm
@@ -176,7 +176,11 @@ - (READisplayLink *)getDisplayLink
   if (!_displayLink) {
     _displayLink = [READisplayLink displayLinkWithTarget:self selector:@selector(onAnimationFrame:)];
 #if !TARGET_OS_OSX
+  if (@available(iOS 15.0, *)) {
+    _displayLink.preferredFrameRateRange = CAFrameRateRangeMake(80, 120, 80);
+  } else {
     _displayLink.preferredFramesPerSecond = 120; // will fallback to 60 fps for devices without Pro Motion display
+  }
 #endif // TARGET_OS_OSX
     [_displayLink addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSRunLoopCommonModes];
   }
diff --git a/node_modules/react-native-reanimated/apple/reanimated/apple/keyboardObserver/REAKeyboardEventObserver.mm b/node_modules/react-native-reanimated/apple/reanimated/apple/keyboardObserver/REAKeyboardEventObserver.mm
index 1b556f6..8cd4fcb 100644
--- a/node_modules/react-native-reanimated/apple/reanimated/apple/keyboardObserver/REAKeyboardEventObserver.mm
+++ b/node_modules/react-native-reanimated/apple/reanimated/apple/keyboardObserver/REAKeyboardEventObserver.mm
@@ -51,7 +51,11 @@ - (READisplayLink *)getDisplayLink
   if (!_displayLink) {
     _displayLink = [READisplayLink displayLinkWithTarget:self selector:@selector(updateKeyboardFrame)];
 #if !TARGET_OS_OSX
+  if (@available(iOS 15.0, *)) {
+    _displayLink.preferredFrameRateRange = CAFrameRateRangeMake(80, 120, 80);
+  } else {
     _displayLink.preferredFramesPerSecond = 120; // will fallback to 60 fps for devices without Pro Motion display
+  }
 #endif
     [_displayLink addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSRunLoopCommonModes];
   }
diff --git a/node_modules/react-native-reanimated/src/propsAllowlists.ts b/node_modules/react-native-reanimated/src/propsAllowlists.ts
index 39c77a1..8bcbc7e 100644
--- a/node_modules/react-native-reanimated/src/propsAllowlists.ts
+++ b/node_modules/react-native-reanimated/src/propsAllowlists.ts
@@ -84,6 +84,7 @@ export const PropsAllowlists: AllowlistsHolder = {
     elevation: true,
     fontSize: true,
     lineHeight: true,
+    textShadowColor: true,
     textShadowRadius: true,
     textShadowOffset: true,
     letterSpacing: true,
diff --git a/node_modules/react-native-reanimated/src/shareables.ts b/node_modules/react-native-reanimated/src/shareables.ts
index 44e961f..1b57980 100644
--- a/node_modules/react-native-reanimated/src/shareables.ts
+++ b/node_modules/react-native-reanimated/src/shareables.ts
@@ -128,6 +128,7 @@ export function makeShareableCloneRecursive<T>(
   const type = typeof value;
   const isTypeObject = type === 'object';
   const isTypeFunction = type === 'function';
+  let isCacheableWorklet = false;
   if ((isTypeObject || isTypeFunction) && value !== null) {
     const cached = shareableMappingCache.get(value);
     if (cached === shareableMappingFlag) {
@@ -166,6 +167,7 @@ export function makeShareableCloneRecursive<T>(
       } else if (isPlainJSObject(value) || isTypeFunction) {
         toAdapt = {};
         if (isWorkletFunction(value)) {
+          isCacheableWorklet = true;
           if (__DEV__) {
             const babelVersion = value.__initData.version;
             if (babelVersion !== undefined && babelVersion !== jsVersion) {
@@ -275,7 +277,7 @@ Offending code was: \`${getWorkletCode(value)}\``);
       }
       const adapted = NativeReanimatedModule.makeShareableClone(
         toAdapt,
-        shouldPersistRemote,
+        shouldPersistRemote || isCacheableWorklet,
         value
       );
       shareableMappingCache.set(value, adapted);
diff --git a/node_modules/react-native-reanimated/lib/typescript/interpolateColor.d.ts b/node_modules/react-native-reanimated/lib/typescript/interpolateColor.d.ts
index 375da59..3566819 100644
--- a/node_modules/react-native-reanimated/lib/typescript/interpolateColor.d.ts
+++ b/node_modules/react-native-reanimated/lib/typescript/interpolateColor.d.ts
@@ -43,11 +43,12 @@ export interface InterpolateHSV {
  *   rgba(r, g, b, a) format.
  * @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolateColor
  */
-export declare function interpolateColor(value: number, inputRange: readonly number[], outputRange: readonly string[], colorSpace?: 'RGB' | 'HSV', options?: InterpolationOptions): string;
-export declare function interpolateColor(value: number, inputRange: readonly number[], outputRange: readonly number[], colorSpace?: 'RGB' | 'HSV', options?: InterpolationOptions): number;
+export declare function interpolateColor(value: number, inputRange: readonly number[], outputRange: readonly string[], colorSpace?: 'RGB' | 'HSV' | 'LAB', options?: InterpolationOptions): string;
+export declare function interpolateColor(value: number, inputRange: readonly number[], outputRange: readonly number[], colorSpace?: 'RGB' | 'HSV' | 'LAB', options?: InterpolationOptions): number;
 export declare enum ColorSpace {
     RGB = 0,
-    HSV = 1
+    HSV = 1,
+    LAB = 2,
 }
 export interface InterpolateConfig {
     inputRange: readonly number[];
diff --git a/node_modules/react-native-reanimated/src/interpolateColor.ts b/node_modules/react-native-reanimated/src/interpolateColor.ts
index f7987b0..6ecff4b 100644
--- a/node_modules/react-native-reanimated/src/interpolateColor.ts
+++ b/node_modules/react-native-reanimated/src/interpolateColor.ts
@@ -1,4 +1,5 @@
 'use strict';
+import { culori } from '../../../src/worklets/oklab';
 import {
   hsvToColor,
   RGBtoHSV,
@@ -122,6 +123,75 @@ const interpolateColorsRGB = (
   );
 };
 
+const interpolateColorsLAB = (
+  value: number,
+  inputRange: readonly number[],
+  colors: InterpolateLAB,
+  _options: InterpolationOptions
+) => {
+  'worklet';
+  const l = interpolate(value, inputRange, colors.l, Extrapolation.CLAMP);
+  const a = interpolate(value, inputRange, colors.a, Extrapolation.CLAMP);
+  const b = interpolate(value, inputRange, colors.b, Extrapolation.CLAMP);
+  const alpha = interpolate(
+    value,
+    inputRange,
+    colors.alpha,
+    Extrapolation.CLAMP
+  );
+  const {
+    r: _r,
+    g: _g,
+    b: _b,
+    alpha: _alpha,
+  } = culori.convert.toRgb({ l, a, b, alpha });
+  return rgbaColor(_r, _g, _b, _alpha);
+};
+
+const _splitColorsIntoChannels = (
+  colors: readonly (string | number)[],
+  convFromRgb: (color: { r: number; g: number; b: number }) => {
+    ch1: number;
+    ch2: number;
+    ch3: number;
+  }
+): {
+  ch1: number[];
+  ch2: number[];
+  ch3: number[];
+  alpha: number[];
+} => {
+  'worklet';
+  const ch1: number[] = [];
+  const ch2: number[] = [];
+  const ch3: number[] = [];
+  const alpha: number[] = [];
+
+  for (let i = 0; i < colors.length; i++) {
+    const color = colors[i];
+    const processedColor = processColor(color);
+    if (typeof processedColor === 'number') {
+      const convertedColor = convFromRgb({
+        r: red(processedColor),
+        g: green(processedColor),
+        b: blue(processedColor),
+      });
+
+      ch1.push(convertedColor.ch1);
+      ch2.push(convertedColor.ch2);
+      ch3.push(convertedColor.ch3);
+      alpha.push(opacity(processedColor));
+    }
+  }
+
+  return {
+    ch1,
+    ch2,
+    ch3,
+    alpha,
+  };
+};
+
 export interface InterpolateRGB {
   r: number[];
   g: number[];
@@ -133,23 +203,21 @@ const getInterpolateRGB = (
   colors: readonly (string | number)[]
 ): InterpolateRGB => {
   'worklet';
+  const { ch1, ch2, ch3, alpha } = _splitColorsIntoChannels(
+    colors,
+    (color) => ({
+      ch1: color.r,
+      ch2: color.g,
+      ch3: color.b,
+    })
+  );
 
-  const r = [];
-  const g = [];
-  const b = [];
-  const a = [];
-  for (let i = 0; i < colors.length; ++i) {
-    const color = colors[i];
-    const processedColor = processColor(color);
-    // explicit check in case if processedColor is 0
-    if (processedColor !== null && processedColor !== undefined) {
-      r.push(red(processedColor));
-      g.push(green(processedColor));
-      b.push(blue(processedColor));
-      a.push(opacity(processedColor));
-    }
-  }
-  return { r, g, b, a };
+  return {
+    r: ch1,
+    g: ch2,
+    b: ch3,
+    a: alpha,
+  };
 };
 
 export interface InterpolateHSV {
@@ -163,27 +231,50 @@ const getInterpolateHSV = (
   colors: readonly (string | number)[]
 ): InterpolateHSV => {
   'worklet';
-  const h = [];
-  const s = [];
-  const v = [];
-  const a = [];
-  for (let i = 0; i < colors.length; ++i) {
-    const color = colors[i];
-    const processedColor = processColor(color) as any;
-    if (typeof processedColor === 'number') {
-      const processedHSVColor = RGBtoHSV(
-        red(processedColor),
-        green(processedColor),
-        blue(processedColor)
-      );
+  const { ch1, ch2, ch3, alpha } = _splitColorsIntoChannels(colors, (color) => {
+    const hsvColor = RGBtoHSV(color.r, color.g, color.b);
+    return {
+      ch1: hsvColor.h,
+      ch2: hsvColor.s,
+      ch3: hsvColor.v,
+    };
+  });
 
-      h.push(processedHSVColor.h);
-      s.push(processedHSVColor.s);
-      v.push(processedHSVColor.v);
-      a.push(opacity(processedColor));
-    }
-  }
-  return { h, s, v, a };
+  return {
+    h: ch1,
+    s: ch2,
+    v: ch3,
+    a: alpha,
+  };
+};
+
+export interface InterpolateLAB {
+  l: number[];
+  a: number[];
+  b: number[];
+  alpha: number[];
+}
+
+const getInterpolateLAB = (
+  colors: readonly (string | number)[]
+): InterpolateLAB => {
+  'worklet';
+
+  const { ch1, ch2, ch3, alpha } = _splitColorsIntoChannels(colors, (color) => {
+    const labColor = culori.convert.fromRgb(color);
+    return {
+      ch1: labColor.l,
+      ch2: labColor.a,
+      ch3: labColor.b,
+    };
+  });
+
+  return {
+    l: ch1,
+    a: ch2,
+    b: ch3,
+    alpha,
+  };
 };
 
 /**
@@ -208,7 +299,7 @@ export function interpolateColor(
   value: number,
   inputRange: readonly number[],
   outputRange: readonly string[],
-  colorSpace?: 'RGB' | 'HSV',
+  colorSpace?: 'RGB' | 'HSV' | 'LAB',
   options?: InterpolationOptions
 ): string;
 
@@ -216,7 +307,7 @@ export function interpolateColor(
   value: number,
   inputRange: readonly number[],
   outputRange: readonly number[],
-  colorSpace?: 'RGB' | 'HSV',
+  colorSpace?: 'RGB' | 'HSV' | 'LAB',
   options?: InterpolationOptions
 ): number;
 
@@ -224,7 +315,7 @@ export function interpolateColor(
   value: number,
   inputRange: readonly number[],
   outputRange: readonly (string | number)[],
-  colorSpace: 'RGB' | 'HSV' = 'RGB',
+  colorSpace: 'RGB' | 'HSV' | 'LAB' = 'RGB',
   options: InterpolationOptions = {}
 ): string | number {
   'worklet';
@@ -242,17 +333,26 @@ export function interpolateColor(
       getInterpolateRGB(outputRange),
       options
     );
+  } else if (colorSpace === 'LAB') {
+    return interpolateColorsLAB(
+      value,
+      inputRange,
+      getInterpolateLAB(outputRange),
+      options
+    );
   }
+
   throw new ReanimatedError(
     `Invalid color space provided: ${
       colorSpace as string
-    }. Supported values are: ['RGB', 'HSV'].`
+    }. Supported values are: ['RGB', 'HSV', 'LAB'].`
   );
 }
 
 export enum ColorSpace {
   RGB = 0,
   HSV = 1,
+  LAB = 2,
 }
 
 export interface InterpolateConfig {