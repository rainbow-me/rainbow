//
//  SystemBlurView.swift
//  react-native-blur-view
//
//  Created by Christian Baroni on 11/18/24.
//

class SystemBlurView: UIView {
  private var blurEffectView: UIVisualEffectView
  private var blurEffect: UIBlurEffect?
  private var blurIntensity: NSNumber
  private var style: UIBlurEffect.Style

  init(
    _ frame: CGRect,
    _ blurIntensity: CGFloat,
    _ style: UIBlurEffect.Style
  ) {
    self.blurIntensity = blurIntensity as NSNumber
    self.style = style
    self.blurEffectView = UIVisualEffectView(effect: nil)
    self.blurEffectView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
    self.blurEffectView.frame = frame

    super.init(frame: frame)

    self.clipsToBounds = true
    addSubview(blurEffectView)
    updateBlurEffect()
  }

  required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented")
  }

  private func updateBlurEffect() {
    blurEffectView.effect = nil
    blurEffect = UIBlurEffect(style: style)
    blurEffectView.effect = blurEffect
  }

  func setBlurIntensity(_ intensity: CGFloat) {
    blurIntensity = intensity as NSNumber
    updateBlurEffect()
  }

  override func layoutSubviews() {
    super.layoutSubviews()
    blurEffectView.frame = bounds
  }
}

//class SystemBlurView: UIView {
//    private enum Constants {
//        static let blurRadiusKey = "blurRadius"
//    }
//    
//    private lazy var visualEffectView: UIVisualEffectView = {
//        if #available(iOS 14.0, *) {
//            return UIVisualEffectView(effect: customBlurEffect_ios14)
//        } else {
//            return UIVisualEffectView(effect: customBlurEffect)
//        }
//    }()
//    
//    private lazy var customBlurEffect_ios14: CustomBlurEffect = {
//        let effect = CustomBlurEffect.effect(with: style)
//        effect.blurRadius = blurIntensity
//        return effect
//    }()
//    
//    private lazy var customBlurEffect: UIBlurEffect = {
//        return (NSClassFromString("_UICustomBlurEffect") as! UIBlurEffect.Type).init()
//    }()
//    
//    private var blurIntensity: CGFloat
//    private var style: UIBlurEffect.Style
//    
//    init(
//        _ frame: CGRect,
//        _ blurIntensity: CGFloat,
//        _ style: UIBlurEffect.Style
//    ) {
//        self.blurIntensity = blurIntensity
//        self.style = style
//        super.init(frame: frame)
//        setupViews()
//        
//        if #available(iOS 14.0, *) {
//            // Handled by lazy initialization
//        } else {
//            customBlurEffect.setValue(blurIntensity, forKeyPath: Constants.blurRadiusKey)
//            visualEffectView.effect = customBlurEffect
//        }
//    }
//    
//    required init?(coder: NSCoder) {
//        fatalError("init(coder:) has not been implemented")
//    }
//    
//    private func setupViews() {
//        addSubview(visualEffectView)
//        visualEffectView.translatesAutoresizingMaskIntoConstraints = false
//        NSLayoutConstraint.activate([
//            visualEffectView.topAnchor.constraint(equalTo: topAnchor),
//            visualEffectView.trailingAnchor.constraint(equalTo: trailingAnchor),
//            visualEffectView.bottomAnchor.constraint(equalTo: bottomAnchor),
//            visualEffectView.leadingAnchor.constraint(equalTo: leadingAnchor)
//        ])
//    }
//    
//    func setBlurIntensity(_ intensity: CGFloat) {
//        blurIntensity = intensity
//        if #available(iOS 14.0, *) {
//            updateViews()
//        } else {
//            customBlurEffect.setValue(intensity, forKeyPath: Constants.blurRadiusKey)
//            visualEffectView.effect = customBlurEffect
//        }
//    }
//    
//    private func updateViews() {
//        if #available(iOS 14.0, *) {
//            visualEffectView.removeFromSuperview()
//            let newEffect = CustomBlurEffect.effect(with: style)
//            newEffect.blurRadius = blurIntensity
//            customBlurEffect_ios14 = newEffect
//            visualEffectView = UIVisualEffectView(effect: customBlurEffect_ios14)
//            setupViews()
//        }
//    }
//    
//    func setSaturationIntensity(_ intensity: CGFloat) {
//        // No-op for system materials
//    }
//}
//
//open class CustomBlurEffectView: UIView {
//    
//    private enum Constants {
//        static let blurRadiusKey = "blurRadius"
//        static let colorTintKey = "colorTint"
//        static let colorTintAlphaKey = "colorTintAlpha"
//    }
//    
//    // MARK: - Public
//    
//    /// Blur radius. Defaults to `10`
//    open var blurRadius: CGFloat = 10.0 {
//        didSet {
//            _setValue(blurRadius, forKey: Constants.blurRadiusKey)
//        }
//    }
//    
//    /// Tint color. Defaults to `nil`
//    open var colorTint: UIColor? {
//        didSet {
//            _setValue(colorTint, forKey: Constants.colorTintKey)
//        }
//    }
//    
//    /// Tint color alpha. Defaults to `0.8`
//    open var colorTintAlpha: CGFloat = 0.8 {
//        didSet {
//            _setValue(colorTintAlpha, forKey: Constants.colorTintAlphaKey)
//        }
//    }
//    
//    /// Visual effect view layer.
//    public var blurLayer: CALayer {
//        return visualEffectView.layer
//    }
//    
//    // MARK: - Initialization
//    
//    public init(
//        radius: CGFloat = 10.0,
//        color: UIColor? = nil,
//        colorAlpha: CGFloat = 0.8) {
//        blurRadius = radius
//        super.init(frame: .zero)
//        backgroundColor = .clear
//        setupViews()
//        defer {
//            blurRadius = radius
//            colorTint = color
//            colorTintAlpha = colorAlpha
//        }
//    }
//    
//    required public init?(coder: NSCoder) {
//        super.init(coder: coder)
//        backgroundColor = .clear
//        setupViews()
//        defer {
//            blurRadius = 10.0
//            colorTint = nil
//            colorTintAlpha = 0.8
//        }
//    }
//    
//    
//    // MARK: - Private
//    
//    /// Visual effect view.
//    private lazy var visualEffectView: UIVisualEffectView = {
//        if #available(iOS 14.0, *) {
//            return UIVisualEffectView(effect: customBlurEffect_ios14)
//        } else {
//            return UIVisualEffectView(effect: customBlurEffect)
//        }
//    }()
//    
//    /// Blur effect for IOS >= 14
//    private lazy var customBlurEffect_ios14: CustomBlurEffect = {
//        let effect = CustomBlurEffect.effect(with: .extraLight)
//        effect.blurRadius = blurRadius
//        return effect
//    }()
//    
//    /// Blur effect for IOS < 14
//    private lazy var customBlurEffect: UIBlurEffect = {
//        return (NSClassFromString("_UICustomBlurEffect") as! UIBlurEffect.Type).init()
//    }()
//    
//    /// Sets the value for the key on the blurEffect.
//    private func _setValue(_ value: Any?, forKey key: String) {
//        if #available(iOS 14.0, *) {
//            if key == Constants.blurRadiusKey {
//                updateViews()
//            }
//            let subviewClass = NSClassFromString("_UIVisualEffectSubview") as? UIView.Type
//            let visualEffectSubview: UIView? = visualEffectView.subviews.filter({ type(of: $0) == subviewClass }).first
//            visualEffectSubview?.backgroundColor = colorTint
//            visualEffectSubview?.alpha = colorTintAlpha
//        } else {
//            customBlurEffect.setValue(value, forKeyPath: key)
//            visualEffectView.effect = customBlurEffect
//        }
//    }
//    
//    /// Setup views.
//    private func setupViews() {
//        addSubview(visualEffectView)
//        visualEffectView.translatesAutoresizingMaskIntoConstraints = false
//        NSLayoutConstraint.activate([
//            visualEffectView.topAnchor.constraint(equalTo: topAnchor),
//            visualEffectView.trailingAnchor.constraint(equalTo: trailingAnchor),
//            visualEffectView.bottomAnchor.constraint(equalTo: bottomAnchor),
//            visualEffectView.leadingAnchor.constraint(equalTo: leadingAnchor),
//        ])
//    }
//    
//    /// Update visualEffectView for ios14+, if we need to change blurRadius
//    private func updateViews() {
//        if #available(iOS 14.0, *) {
//            visualEffectView.removeFromSuperview()
//            let newEffect = CustomBlurEffect.effect(with: .extraLight)
//            newEffect.blurRadius = blurRadius
//            customBlurEffect_ios14 = newEffect
//            visualEffectView = UIVisualEffectView(effect: customBlurEffect_ios14)
//            setupViews()
//        }
//    }
//}
//
//class CustomBlurEffect: UIBlurEffect {
//    public var blurRadius: CGFloat = 10.0
//    private var style: UIBlurEffect.Style
//    
//    private enum Constants {
//        static let blurRadiusSettingKey = "blurRadius"
//    }
//    
//    required init?(coder: NSCoder) {
//        fatalError("init(coder:) has not been implemented")
//    }
//    
//    required init(style: UIBlurEffect.Style) {
//        self.style = style
//        super.init()
//    }
//    
//    class func effect(with style: UIBlurEffect.Style) -> CustomBlurEffect {
//        let result = super.init(style: style)
//        object_setClass(result, self)
//        let effect = result as! CustomBlurEffect
//        effect.style = style
//        return effect
//    }
//    
//    override func copy(with zone: NSZone? = nil) -> Any {
//        let result = super.copy(with: zone)
//        object_setClass(result, Self.self)
//        if let copy = result as? CustomBlurEffect {
//            copy.blurRadius = self.blurRadius
//            copy.style = self.style
//        }
//        return result
//    }
//    
//    override var effectSettings: AnyObject {
//        get {
//            let settings = super.effectSettings
//            settings.setValue(blurRadius, forKey: Constants.blurRadiusSettingKey)
//            settings.setValue(style.rawValue, forKey: "style")
//            return settings
//        }
//        set {
//            super.effectSettings = newValue
//        }
//    }
//}
//
////class CustomBlurEffect: UIBlurEffect {
////    
////    public var blurRadius: CGFloat = 10.0
////    
////    private enum Constants {
////        static let blurRadiusSettingKey = "blurRadius"
////    }
////    
////    class func effect(with style: UIBlurEffect.Style) -> CustomBlurEffect {
////        let result = super.init(style: style)
////        object_setClass(result, self)
////        return result as! CustomBlurEffect
////    }
////    
////    override func copy(with zone: NSZone? = nil) -> Any {
////        let result = super.copy(with: zone)
////        object_setClass(result, Self.self)
////        return result
////    }
////    
////    override var effectSettings: AnyObject {
////        get {
////            let settings = super.effectSettings
////            settings.setValue(blurRadius, forKey: Constants.blurRadiusSettingKey)
////            return settings
////        }
////        set {
////            super.effectSettings = newValue
////        }
////    }
////    
////}
//
//private var AssociatedObjectHandle: UInt8 = 0
//
//extension UIVisualEffect {
//    @objc var effectSettings: AnyObject {
//        get {
//            return objc_getAssociatedObject(self, &AssociatedObjectHandle) as AnyObject
//        }
//        set {
//            objc_setAssociatedObject(self, &AssociatedObjectHandle, newValue, objc_AssociationPolicy.OBJC_ASSOCIATION_RETAIN_NONATOMIC)
//        }
//    }
//}
