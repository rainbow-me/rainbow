name: Android e2e tests

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - develop
jobs:
  android-e2e:
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: app-e2e-runner
    timeout-minutes: 90
    concurrency:
      # For pushes on develop run for every commit, but for PRs cancel in-progress runs.
      group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.ref || github.sha }}
      cancel-in-progress: true

    env:
      # Can be used to help debug test failures. This will cause the apk to be
      # built for all architectures so it can be downloaded from the artifacts
      # and installed locally. It will also record logcat logs and a video of
      # the test run. Note that the video is limited to 3 minutes.
      DEBUG: false
      SHARDS: 1
      ANDROID_EMULATOR_API_LEVEL: 31
      ANDROID_EMULATOR_PROFILE: pixel_6
      ANDROID_EMULATOR_CORES: 4
      ANDROID_EMULATOR_RAM_SIZE: 8192
      ANDROID_EMULATOR_BUILD: 10696886
      ARTIFACTS_FOLDER: e2e-artifacts
      ARCH: x86_64
      ANDROID_EMULATOR_WAIT_TIME_BEFORE_KILL: 60

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Java environment
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install secret tools
        run: sudo apt install libsecret-tools

      - name: Setup env key
        uses: ./.github/actions/ssh/
        with:
          name: env
          key: ${{ secrets.DEPLOY_PKEY_DOTENV_REPO }}

      - name: Setup scripts key
        uses: ./.github/actions/ssh/
        with:
          name: scripts
          key: ${{ secrets.DEPLOY_PKEY_SCRIPTS_REPO }}

      - name: Setup sandbox key
        uses: ./.github/actions/ssh/
        with:
          name: sandbox
          key: ${{ secrets.DEPLOY_PKEY_SANDBOX_REPO }}

      - name: Setup env
        env:
            SSH_AUTH_SOCK: /tmp/ssh_agent_env.sock
        run: |
            git clone git@github.com:rainbow-me/rainbow-env.git
            mv rainbow-env/dotenv .env
            mv rainbow-env/android/app/google-services.json android/app/google-services.json
            rm -rf rainbow-env
            sed -i "s/IS_TESTING=false/IS_TESTING=true/" .env
      - name: Setup scripts
        env:
            CI_SCRIPTS: ${{ secrets.CI_SCRIPTS }}
            SSH_AUTH_SOCK: /tmp/ssh_agent_scripts.sock
        run: |
            eval $CI_SCRIPTS
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            .yarn/cache
            .yarn/install-state.gz
          key: ${{ runner.os }}-${{ runner.arch }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache Gradle build
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false


      - name: Install dependencies
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent_sandbox.sock
        run: |
          yarn install && yarn setup

      - name: Install Anvil
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Check for frozen lockfile
        run: ./scripts/check-lockfile.sh

      - name: Audit CI
        run: yarn audit-ci --config audit-ci.jsonc

      - name: Build the app in Release mode
        run: ./scripts/e2e-android-build.sh

      - name: Install Maestro
        run: export MAESTRO_VERSION=1.39.13; curl -fsSL "https://get.maestro.mobile.dev" | bash

      - name: Setup Android Emulator
        id: android-emulator
        uses: ./.github/actions/android-emulator/
        with:
          emulators: ${{ env.SHARDS }}
          api-level: ${{ env.ANDROID_EMULATOR_API_LEVEL }}
          profile: ${{ env.ANDROID_EMULATOR_PROFILE }}
          cores: ${{ env.ANDROID_EMULATOR_CORES }}
          ram-size: ${{ env.ANDROID_EMULATOR_RAM_SIZE }}
          arch: ${{ env.ARCH }}
          emulator-build: ${{ env.ANDROID_EMULATOR_BUILD }}

      - name: Run tests
        uses: reactivecircus/android-emulator-runner@v2
        id: e2e_test
        with:
          api-level: ${{ env.ANDROID_EMULATOR_API_LEVEL }}
          target: google_apis_playstore
          arch: ${{ env.ARCH }}
          force-avd-creation: false
          emulator-options: -no-snapshot -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          profile: ${{ env.ANDROID_EMULATOR_PROFILE }}
          cores: ${{ env.ANDROID_EMULATOR_CORES }}
          ram-size: ${{ env.ANDROID_EMULATOR_RAM_SIZE }}
          emulator-build: ${{ env.ANDROID_EMULATOR_BUILD }}
          script: ./scripts/e2e-android-ci.sh

      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: ${{ env.ARTIFACTS_FOLDER }}

      - name: Upload apk
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: android/app/build/outputs/apk/release/app-release.apk
