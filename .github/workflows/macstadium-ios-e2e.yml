name: iOS e2e tests
on:
  pull_request:
    # prevent running on draft PRs
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
  push:
    branches:
      - develop
jobs:
  # iOS build job
  build-ios:
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ["self-hosted"]
    concurrency:
      group: ${{ github.workflow }}-build-${{ github.event_name == 'pull_request' && github.ref || github.sha }}
      cancel-in-progress: true
    permissions:
      contents: read
    timeout-minutes: 45
    outputs:
      artifact-id: ${{ steps.rnef-remote-build-ios.outputs.artifact-id }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up github keys
        run: git config core.sshCommand "ssh -i ~/.ssh/id_ed25519 -F /dev/null"

      - name: Set sanitized branch name
        id: sanitize
        run: echo "SANITIZED_REF_NAME=${GITHUB_REF_NAME//\//-}" >> $GITHUB_ENV
      
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      
      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            .yarn/cache
            .yarn/install-state.gz
            !.eslintcache
          key: yarn-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      - name: Set up ENV vars & scripts
        env:
          CI_SCRIPTS: ${{ secrets.CI_SCRIPTS }}
        run: |
          source ~/.zshrc
          git clone git@github.com:rainbow-me/rainbow-env.git
          mv rainbow-env/dotenv .env && rm -rf rainbow-env
          eval $CI_SCRIPTS
      
      - name: Checkout Janic branch for now
        run: cd rainbow-scripts && git checkout @janic/rn79
      
      - name: Install dependencies
        run: |
          yarn install && yarn setup

      - name: Modify env for testing
        run: |
          sed -i'' -e "s/IS_TESTING=false/IS_TESTING=true/" .env && rm -f .env-e

      - name: RNEF Remote Build - iOS simulator
        id: rnef-remote-build-ios
        uses: callstackincubator/ios@v2
        with:
          scheme: Rainbow
          destination: simulator
          github-token: ${{ secrets.GITHUB_TOKEN }}
          configuration: Debug
          comment-bot: false
          re-sign: true

  # iOS e2e tests job
  e2e-ios:
    needs: build-ios
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ["self-hosted"]
    concurrency:
      group: ${{ github.workflow }}-e2e-${{ github.event_name == 'pull_request' && github.ref || github.sha }}
      cancel-in-progress: true
    permissions:
      contents: read
    timeout-minutes: 60
    env:
      ARTIFACTS_FOLDER: e2e-artifacts
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up github keys
        run: git config core.sshCommand "ssh -i ~/.ssh/id_ed25519 -F /dev/null"

      - name: Set up ENV vars & scripts
        env:
          CI_SCRIPTS: ${{ secrets.CI_SCRIPTS }}
        run: |
          source ~/.zshrc
          git clone git@github.com:rainbow-me/rainbow-env.git
          mv rainbow-env/dotenv .env && rm -rf rainbow-env
          eval $CI_SCRIPTS

      - name: Modify env for testing
        run: |
          sed -i'' -e "s/IS_TESTING=false/IS_TESTING=true/" .env && rm -f .env-e

      - name: Download and Unpack IPA artifact
        run: |
          curl -L -H "Authorization: token ${{ github.token }}" -o artifact.zip "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${{ needs.build-ios.outputs.artifact-id }}/zip"
          unzip artifact.zip -d downloaded-artifacts
          ls -l downloaded-artifacts
          APP_ARCHIVE_PATH=$(find downloaded-artifacts -name "*.tar.gz" -print -quit)
          tar -xzf "$APP_ARCHIVE_PATH" -C downloaded-artifacts
          APP_PATH=$(find downloaded-artifacts -name "*.app" -type d | head -n 1)
          echo "ARTIFACT_PATH_FOR_E2E=$APP_PATH" >> $GITHUB_ENV

      - name: Install Maestro
        run: export MAESTRO_VERSION=1.41.0; curl -fsSL "https://get.maestro.mobile.dev" | bash

      - uses: futureware-tech/simulator-action@v4
        id: simulator
        with:
          model: 'iPhone 16'
          wait_for_boot: true
      
      - name: Ensure Simulator is fully booted
        run: |
          echo "Waiting for simulator to be fully booted..."
          timeout=0
          while [[ "$(xcrun simctl list | grep "${{ steps.simulator.outputs.udid }}" | grep -o 'Booted')" != "Booted" ]]; do
            sleep 5
            timeout=$((timeout+5))
            echo "Still waiting... ($timeout seconds)"
            if [ $timeout -ge 120 ]; then
              echo "Timed out waiting for simulator"
              exit 1
            fi
          done
          echo "Simulator is ready."
      
      - name: Run Tests
        run: ./scripts/e2e-ios-ci.sh
        env:
          DEVICE_UDID: ${{ steps.simulator.outputs.udid }}

      - name: Upload artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: ${{ env.ARTIFACTS_FOLDER }}
