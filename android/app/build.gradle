apply plugin: "com.android.application"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-parcelize'


def getPassword(String currentUser, String keyChain) {
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
        exec {
            commandLine 'security', '-q', 'find-generic-password', '-a', currentUser, '-s', keyChain, '-w'
            standardOutput = stdout
            errorOutput = stderr
            ignoreExitValue true
        }
    } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        exec {
            // In order for this to work you need to store it:
            // secret-tool store --label='mm' server mm user mm key mm-upload-key
            commandLine 'secret-tool', 'lookup', 'server', currentUser, 'user', currentUser, 'key', keyChain
            standardOutput = stdout
            errorOutput = stderr
            ignoreExitValue true
        }
    } else {
        throw new GradleException('Unsupported OS! Only MacOSx and Linux are supported')
    }
    //noinspection GroovyAssignabilityCheck
    stdout.toString().trim()
}


import com.android.build.OutputFile



apply plugin: "com.facebook.react"



apply from: "../../node_modules/@sentry/react-native/sentry.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

react {
	    /* Folders */
	    //   The root of your project, i.e. where "package.json" lives. Default is '..'
	    // root = file("../")
	    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
	    // reactNativeDir = file("../node_modules/react-native")
	    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
	    // codegenDir = file("../node_modules/@react-native/codegen")
	    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
	    // cliFile = file("../node_modules/react-native/cli.js")
	
	    /* Variants */
	    //   The list of variants to that are debuggable. For those we're going to
	    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
	    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
	    // debuggableVariants = ["liteDebug", "prodDebug"]
	
	    /* Bundling */
	    //   A list containing the node command and its flags. Default is just 'node'.
	    // nodeExecutableAndArgs = ["node"]
	    //
	    //   The command to run when bundling. By default is 'bundle'
	    // bundleCommand = "ram-bundle"
	    //
	    //   The path to the CLI configuration file. Default is empty.
	    // bundleConfig = file(../rn-cli.config.js)
	    //
	    //   The name of the generated asset file containing your JS bundle
	    // bundleAssetName = "MyApplication.android.bundle"
	    //
	    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
	    // entryFile = file("../js/MyApplication.android.js")
	    //
	    //   A list of extra flags to pass to the 'bundle' commands.
	    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
	    // extraPackagerArgs = []
	
	    /* Hermes Commands */
	    //   The hermes compiler command to run. By default it is 'hermesc'
	    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
	    //
	    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
	    // hermesFlags = ["-O", "-output-source-map"]
	    //
    // Added by install-expo-modules
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", rootDir.getAbsoluteFile().getParentFile().getAbsolutePath(), "android", "absolute"].execute(null, rootDir).text.trim())
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli')"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
}

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'



android {
    def envFile = project.file('../../.env')
    def env =[:]

    if (System.getenv('EAS_BUILD')) {
        System.getenv().each { key, value ->
            env[key] = value
        }
    } else {
        envFile.eachLine {
            if (it.contains('=') && (!it.startsWith("#"))) {
                def (key, value) = it.split('=')
                env[key] = value
            }
        }
    }

    def props = project.file('src/main/java/me/rainbow/MainApplication.java')
    def contents2 = props.getText( 'UTF-8' ).replaceAll( "//_REA ", '' ).replaceAll('/\\* REA', '//_REA /* REA')
    props.delete()
    props << contents2

    if (env.get('DISABLE_REANIMATED_IN_DEV') == 'YES') {
        def contents = props.getText( 'UTF-8' ).replaceAll( "//_REA ", '' )
        props.delete()
        props << contents
    }

    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    namespace 'me.rainbow'
    defaultConfig {
        // https://github.com/microsoft/react-native-code-push/issues/1961#issuecomment-710698621
        resValue 'string', "CODE_PUSH_APK_BUILD_TIME", String.format("\"%d\"", System.currentTimeMillis())
        resValue 'string', "CodePushDeploymentKey", env.get('CODE_PUSH_DEPLOYMENT_KEY_ANDROID')
        applicationId "me.rainbow"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 190
        versionName "1.9.6"
        missingDimensionStrategy 'react-native-camera', 'general'
        renderscriptTargetApi 23
        renderscriptSupportModeEnabled true
        multiDexEnabled true
        testBuildType System.getProperty('testBuildType', 'debug')  // This will later be used to control the test apk build type
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        manifestPlaceholders = [
		    BRANCH_KEY: env.get('BRANCH_KEY')
	    ]

        ndk {
            abiFilters 'armeabi-v7a','arm64-v8a','x86','x86_64'
        }
    }


    signingConfigs {
        debug {
            storeFile file('../keystores/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        def pass = System.getenv('RAINBOW_KEY_ANDROID_PASSWORD') ?: getPassword("rainbow","rainbow-android-key")

        release {
            storeFile file('../keystores/rainbow-key.keystore')
            storePassword pass
            keyAlias 'rainbow-alias'
            keyPassword pass
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://facebook.github.io/react-native/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            // Detox-specific additions to pro-guard
            //proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
        }
    }

    buildFeatures {
        viewBinding true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        pickFirst '**/armeabi-v7a/libc++_shared.so'
        pickFirst '**/x86/libc++_shared.so'
        pickFirst '**/arm64-v8a/libc++_shared.so'
        pickFirst '**/x86_64/libc++_shared.so'
        pickFirst '**/x86/libjsc.so'
        pickFirst '**/armeabi-v7a/libjsc.so'
    }
}

configurations.all {
    resolutionStrategy {
        force 'com.google.android.gms:play-services-auth:17.0.0'
    }
}

dependencies {

    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    
    implementation 'io.github.novacrypto:BIP39:2019.01.27'
    implementation 'com.google.android.play:core:1.8.2'
    implementation 'com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava'
    implementation "androidx.core:core-splashscreen:1.0.0"

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_FRESCO_VERSION}")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    // DETOX
    //androidTestImplementation('com.wix:detox:+')

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)



