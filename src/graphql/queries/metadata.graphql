# https://metadata.p.rainbow.me/v1/graph

query getContractFunction($chainID: Int!, $hex: String!) {
  contractFunction(chainID: $chainID, hex: $hex) {
    text
  }
}

query getEnsMarquee {
  ensMarquee {
    accounts {
      name
      address
      avatar
    }
  }
}

fragment amount on RewardsAmount {
  usd
  token
}

fragment baseQuery on Rewards {
  meta {
    title
    distribution {
      next
      total
      left
    }
    status
    end
    token {
      asset {
        assetCode
        decimals
        iconURL
        name
        chainID
        symbol
      }
    }
    color
  }
}

query getRewardsDataForWallet($address: String!) {
  rewards(project: OPTIMISM, address: $address) {
    ...baseQuery
    earnings {
      total {
        ...amount
      }
      multiplier {
        amount
        breakdown {
          amount
          qualifier
        }
      }
      pending {
        ...amount
      }
      daily {
        day
        usd
        token
      }
      updatedAt
    }
    stats {
      actions {
        type
        amount {
          ...amount
        }
        rewardPercent
      }
    }
  }
}

query reverseResolveENSProfile(
  $chainID: Int!
  $address: String!
  $fields: [String!]
) {
  reverseResolveENSProfile(
    chainID: $chainID
    address: $address
    fields: $fields
  ) {
    name
    address
    resolverAddress
    reverseResolverAddress
    chainID
    fields {
      key
      value
    }
  }
}

query getdApp($shortName: String!, $url: String!, $status: Boolean!) {
  dApp(shortName: $shortName, url: $url) {
    name
    status @include(if: $status)
    colors {
      primary
      fallback
      shadow
    }
    iconURL
    url
    description
    shortName
  }
}

fragment asset on TransactionSimulationAsset {
  assetCode
  decimals
  iconURL
  name
  network
  symbol
  type
  interface
  tokenId
  status
}

fragment asset on TransactionSimulationAsset {
  assetCode
  decimals
  iconURL
  name
  network
  symbol
  type
  interface
  tokenId
  status
}
fragment change on TransactionSimulationChange {
  asset {
    ...asset
  }
  quantity
}
fragment target on TransactionSimulationTarget {
  address
  name
  iconURL
  function
  created
  sourceCodeStatus
}

fragment simulationError on TransactionError {
  message
  type
}

query simulateTransactions(
  $chainId: Int!
  $transactions: [Transaction!]
  $domain: String!
) {
  simulateTransactions(
    chainID: $chainId
    transactions: $transactions
    domain: $domain
  ) {
    error {
      ...simulationError
    }
    scanning {
      result
      description
    }
    simulation {
      in {
        ...change
      }
      out {
        ...change
      }
      approvals {
        asset {
          ...asset
        }
        spender {
          ...target
        }
        quantityAllowed
        quantityAtRisk
      }
      meta {
        to {
          ...target
        }
      }
    }
  }
}

query simulateMessage(
  $address: String!
  $chainId: Int!
  $message: Message!
  $domain: String!
) {
  simulateMessage(
    address: $address
    chainID: $chainId
    message: $message
    domain: $domain
  ) {
    error {
      ...simulationError
    }
    scanning {
      result
      description
    }
    simulation {
      in {
        ...change
      }
      out {
        ...change
      }
      approvals {
        asset {
          ...asset
        }
        spender {
          ...target
        }
        quantityAllowed
        quantityAtRisk
      }
      meta {
        to {
          ...target
        }
      }
    }
  }
}
