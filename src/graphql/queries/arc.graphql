fragment asset on Asset {
  address
  symbol
  decimals
  name
}

fragment amount on AssetAmount {
  raw
  decimal
  usd
}

query getNFTOffers($walletAddress: String!, $sortBy: SortCriterion!) {
  nftOffers(walletAddress: $walletAddress, sortBy: $sortBy) {
    createdAt
    url
    nft {
      aspectRatio
      name
      contractAddress
      tokenId
      collectionName
      imageUrl
      uniqueId
      predominantColor
    }
    floorDifferencePercentage
    validUntil
    marketplace {
      name
      imageUrl
    }
    grossAmount {
      ...amount
    }
    netAmount {
      ...amount
    }
    paymentToken {
      ...asset
    }
    royaltiesPercentage
    feesPercentage
    floorPrice {
      amount {
        ...amount
      }
      paymentToken {
        ...asset
      }
    }
    network
  }
}

query getPoapEventByQrHash($qrHash: String!) {
  getPoapEventByQrHash(qrHash: $qrHash) {
    id
    name
    imageUrl
    createdAt
    qrHash
    secret
  }
}

query claimPoapByQrHash(
  $walletAddress: String!
  $qrHash: String!
  $secret: String!
) {
  claimPoapByQrHash(
    walletAddress: $walletAddress
    qrHash: $qrHash
    secret: $secret
  ) {
    success
    error
  }
}

query getPoapEventBySecretWord($secretWord: String!) {
  getPoapEventBySecretWord(secretWord: $secretWord) {
    id
    name
    imageUrl
    createdAt
    qrHash
    secretWord
  }
}

query claimPoapBySecretWord($walletAddress: String!, $secretWord: String!) {
  claimPoapBySecretWord(
    walletAddress: $walletAddress
    secretWord: $secretWord
  ) {
    success
    error
  }
}

fragment mintStatus on MintStatus {
  isMintable
  price
}

fragment mintedNFT on MintedNFT {
  tokenID
  imageURI
  mimeType
  title
  value
  mintTime
}

fragment mintableCollection on MintableCollection {
  externalURL
  contract
  contractAddress
  chainId
  deployer
  name
  imageURL
  imageMimeType
  mintsLastHour
  addressesLastHour
  lastEvent
  firstEvent
  totalMints
  maxSupply
  recentMints {
    ...mintedNFT
  }
  mintStatus {
    ...mintStatus
  }
}

fragment mintableCollectionsResult on MintableCollectionsResult {
  collections {
    ...mintableCollection
  }
}

fragment mintableCollectionResult on MintableCollectionResult {
  collection {
    ...mintableCollection
  }
}

query getMintableCollections($walletAddress: String!) {
  getMintableCollections(walletAddress: $walletAddress) {
    collections {
      ...mintableCollection
    }
  }
}
