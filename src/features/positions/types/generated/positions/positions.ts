// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: external/positions/positions.proto

/* eslint-disable */
import { type Asset } from '../common/asset';
import { type ResponseMetadata } from '../common/request_metadata';

/**
 * Enum for position names.
 * These represent high-level, user-facing categories for portfolio items.
 */
export const PositionName = {
  /** UNSPECIFIED - Unspecified position name. */
  UNSPECIFIED: 'POSITION_NAME_UNSPECIFIED',
  /**
   * YIELD - Yield.
   * Represents positions that generate ongoing income or returns.
   */
  YIELD: 'POSITION_NAME_YIELD',
  /**
   * DEPOSIT - Deposit.
   * Similar to Yield but without daily income; used in complex scenarios like spot positions in DDEX or pools in Pooltogether.
   */
  DEPOSIT: 'POSITION_NAME_DEPOSIT',
  /**
   * STAKED - Staked.
   * Deposits and reward tokens are the same (e.g., deposit CAKE to earn CAKE in PancakeSwap); no unlock time.
   */
  STAKED: 'POSITION_NAME_STAKED',
  /**
   * LOCKED - Locked.
   * Similar to Staked but includes an unlock time restriction.
   */
  LOCKED: 'POSITION_NAME_LOCKED',
  /**
   * FARMING - Farming.
   * Deposits and reward tokens differ; typical yield farming positions.
   */
  FARMING: 'POSITION_NAME_FARMING',
  /**
   * LEVERAGED_FARMING - Leveraged Farming.
   * Farming positions that use leverage to amplify returns.
   */
  LEVERAGED_FARMING: 'POSITION_NAME_LEVERAGED_FARMING',
  /**
   * LENDING - Lending.
   * Positions involving lending assets to earn interest or rewards.
   */
  LENDING: 'POSITION_NAME_LENDING',
  /**
   * VESTING - Vesting.
   * Positions where tokens are released over time in installments.
   */
  VESTING: 'POSITION_NAME_VESTING',
  /**
   * REWARDS - Rewards.
   * Accumulated rewards from DeFi activities.
   */
  REWARDS: 'POSITION_NAME_REWARDS',
  /**
   * AIRDROP - Airdrop.
   * Positions related to airdropped tokens or claims.
   */
  AIRDROP: 'POSITION_NAME_AIRDROP',
  /**
   * LIQUIDITY_POOL - Liquidity Pool.
   * Positions in liquidity pools (e.g., Curve, Uniswap, 1inch, DODO).
   */
  LIQUIDITY_POOL: 'POSITION_NAME_LIQUIDITY_POOL',
  /**
   * OPTIONS_SELLER - Options Seller.
   * Seller's side in options trading positions.
   */
  OPTIONS_SELLER: 'POSITION_NAME_OPTIONS_SELLER',
  /**
   * OPTIONS_BUYER - Options Buyer.
   * Buyer's side in options trading positions.
   */
  OPTIONS_BUYER: 'POSITION_NAME_OPTIONS_BUYER',
  /**
   * INSURANCE_SELLER - Insurance Seller.
   * Seller's side in insurance positions.
   */
  INSURANCE_SELLER: 'POSITION_NAME_INSURANCE_SELLER',
  /**
   * INSURANCE_BUYER - Insurance Buyer.
   * Buyer's side in insurance positions.
   */
  INSURANCE_BUYER: 'POSITION_NAME_INSURANCE_BUYER',
  /**
   * INVESTMENT - Investment.
   * General investment positions (e.g., TokenSets).
   */
  INVESTMENT: 'POSITION_NAME_INVESTMENT',
  /**
   * GOVERNANCE - Governance.
   * Positions related to governance tokens or voting.
   */
  GOVERNANCE: 'POSITION_NAME_GOVERNANCE',
  /**
   * PERPETUALS - Perpetuals.
   * Positions in perpetual contracts.
   */
  PERPETUALS: 'POSITION_NAME_PERPETUALS',
  /**
   * NFT_STAKED - NFT Staked.
   * Staked NFT positions (e.g., Ape Stake).
   */
  NFT_STAKED: 'POSITION_NAME_NFT_STAKED',
  /**
   * NFT_LIQUIDITY_POOL - NFT Liquidity Pool.
   * Liquidity pools involving NFTs (e.g., sudoswap).
   */
  NFT_LIQUIDITY_POOL: 'POSITION_NAME_NFT_LIQUIDITY_POOL',
  /**
   * NFT_LENDING - NFT Lending.
   * Lending positions using NFTs as collateral (e.g., BendDao).
   */
  NFT_LENDING: 'POSITION_NAME_NFT_LENDING',
  /**
   * NFT_FRACTION - NFT Fraction.
   * Fractional ownership of NFTs (e.g., NFTX).
   */
  NFT_FRACTION: 'POSITION_NAME_NFT_FRACTION',
  /**
   * NFT_P2P_BORROWER - NFT P2P Borrower.
   * Borrower's side in P2P NFT borrowing.
   */
  NFT_P2P_BORROWER: 'POSITION_NAME_NFT_P2P_BORROWER',
  /**
   * NFT_P2P_LENDER - NFT P2P Lender.
   * Lender's side in P2P NFT lending.
   */
  NFT_P2P_LENDER: 'POSITION_NAME_NFT_P2P_LENDER',
  UNRECOGNIZED: 'UNRECOGNIZED',
} as const;

export type PositionName = (typeof PositionName)[keyof typeof PositionName];

export namespace PositionName {
  export type UNSPECIFIED = typeof PositionName.UNSPECIFIED;
  export type YIELD = typeof PositionName.YIELD;
  export type DEPOSIT = typeof PositionName.DEPOSIT;
  export type STAKED = typeof PositionName.STAKED;
  export type LOCKED = typeof PositionName.LOCKED;
  export type FARMING = typeof PositionName.FARMING;
  export type LEVERAGED_FARMING = typeof PositionName.LEVERAGED_FARMING;
  export type LENDING = typeof PositionName.LENDING;
  export type VESTING = typeof PositionName.VESTING;
  export type REWARDS = typeof PositionName.REWARDS;
  export type AIRDROP = typeof PositionName.AIRDROP;
  export type LIQUIDITY_POOL = typeof PositionName.LIQUIDITY_POOL;
  export type OPTIONS_SELLER = typeof PositionName.OPTIONS_SELLER;
  export type OPTIONS_BUYER = typeof PositionName.OPTIONS_BUYER;
  export type INSURANCE_SELLER = typeof PositionName.INSURANCE_SELLER;
  export type INSURANCE_BUYER = typeof PositionName.INSURANCE_BUYER;
  export type INVESTMENT = typeof PositionName.INVESTMENT;
  export type GOVERNANCE = typeof PositionName.GOVERNANCE;
  export type PERPETUALS = typeof PositionName.PERPETUALS;
  export type NFT_STAKED = typeof PositionName.NFT_STAKED;
  export type NFT_LIQUIDITY_POOL = typeof PositionName.NFT_LIQUIDITY_POOL;
  export type NFT_LENDING = typeof PositionName.NFT_LENDING;
  export type NFT_FRACTION = typeof PositionName.NFT_FRACTION;
  export type NFT_P2P_BORROWER = typeof PositionName.NFT_P2P_BORROWER;
  export type NFT_P2P_LENDER = typeof PositionName.NFT_P2P_LENDER;
  export type UNRECOGNIZED = typeof PositionName.UNRECOGNIZED;
}

/** Enum for detail types. */
export const DetailType = {
  /** UNSPECIFIED - Unspecified detail type. */
  UNSPECIFIED: 'DETAIL_TYPE_UNSPECIFIED',
  /**
   * COMMON - Common - generic type.
   * Represents a generic type for various DeFi scenarios like liquidity pools and farming.
   * Used in: e.g., uniswap2 (Liquidity Pool), yearn2 (Farm), pooltogether (Deposit).
   */
  COMMON: 'DETAIL_TYPE_COMMON',
  /**
   * LOCKED - Locked - locked position.
   * Represents a position where assets are locked with an unlock time, similar to staking but with time restrictions.
   * Used in: e.g., bsc_ellipsis (Locked).
   */
  LOCKED: 'DETAIL_TYPE_LOCKED',
  /**
   * LENDING - Lending - the type of lending.
   * Represents lending activities where users deposit tokens and may borrow or earn rewards.
   * Used in: e.g., aave2 (Lending), compound (Lending).
   */
  LENDING: 'DETAIL_TYPE_LENDING',
  /**
   * LEVERAGED_FARMING - Leveraged farming - leveraged mining.
   * Represents farming activities with borrowed funds to amplify returns, including debt ratios.
   * Used in: e.g., alpha (Farming).
   */
  LEVERAGED_FARMING: 'DETAIL_TYPE_LEVERAGED_FARMING',
  /**
   * VESTING - Vesting - instalment release.
   * Represents a token release mechanism where tokens are distributed over time in installments.
   * Used in: e.g., bzx2 (Vesting).
   */
  VESTING: 'DETAIL_TYPE_VESTING',
  /**
   * REWARD - Reward - combined reward.
   * Represents rewards earned from various DeFi activities, typically in the form of tokens.
   * Used in: e.g., bxz2 (Rewards).
   */
  REWARD: 'DETAIL_TYPE_REWARD',
  UNRECOGNIZED: 'UNRECOGNIZED',
} as const;

export type DetailType = (typeof DetailType)[keyof typeof DetailType];

export namespace DetailType {
  export type UNSPECIFIED = typeof DetailType.UNSPECIFIED;
  export type COMMON = typeof DetailType.COMMON;
  export type LOCKED = typeof DetailType.LOCKED;
  export type LENDING = typeof DetailType.LENDING;
  export type LEVERAGED_FARMING = typeof DetailType.LEVERAGED_FARMING;
  export type VESTING = typeof DetailType.VESTING;
  export type REWARD = typeof DetailType.REWARD;
  export type UNRECOGNIZED = typeof DetailType.UNRECOGNIZED;
}

/**
 * Represents a token object with common fields.
 *
 * Additional context-specific fields are optional.
 */
export interface PositionToken {
  asset: Asset | undefined;
  /**
   * Amount of the token.
   *
   * example: 0.001
   */
  amount: string;
  /**
   * Optional: Whether the token is used as collateral (e.g., in DETAIL_TYPE_LENDING).
   *
   * example: true
   */
  isCollateral?: boolean | undefined;
  /**
   * Optional: Claimable amount (e.g., in DETAIL_TYPE_VESTING).
   *
   * example: 0.01
   */
  claimableAmount?: string | undefined;
}

/** Statistics for the portfolio item. */
export interface Stats {
  /**
   * Total asset value in specific currency.
   *
   * example: 40.2528
   */
  assetValue: string;
  /**
   * Total debt value in USD.
   *
   * example: 0
   */
  debtValue: string;
  /**
   * Net value in USD.
   *
   * example: 40.2528
   */
  netValue: string;
}

/** Pool object. */
export interface Pool {
  /**
   * Unique pool ID.
   *
   * example: "0x7d2768de32b0b80b7a3454c06bdac94a69ddc7a9"
   */
  id: string;
  /**
   * Chain ID.
   *
   * example: "56"
   */
  chainId: number;
}

export interface Detail {
  /**
   * Supply token list.
   * Belongs to: common, locked, lending, leveraged_farming.
   * - common: the value of the token, *amount (e.g., uniswap2 Liquidity Pool, yearn2 Farm, pooltogether Deposit).
   * - locked: charge token, *amount (e.g., bsc_ellipsis Locked).
   * - lending: deposit token, *amount - the amount of deposits, with is_collateral optional (e.g., aave2 Lending, compound Lending).
   * - leveraged_farming: deposit token, *amount - amount of deposits (e.g., alpha Farming).
   */
  supplyTokenList: PositionToken[];
  /**
   * Reward token list.
   * Belongs to: common, locked, lending.
   * - common: reward token, *amount.
   * - locked: reward token, *amount.
   * - lending: reward token, *amount - the amount of rewards.
   */
  rewardTokenList: PositionToken[];
  /**
   * Borrow token list.
   * Belongs to: common, lending, leveraged_farming.
   * - common: debt token, *amount.
   * - lending: borrowing token, *amount - number of loans.
   * - leveraged_farming: borrow token, *amount - amount of money borrowed.
   */
  borrowTokenList: PositionToken[];
  /**
   * Token list.
   * Belongs to: reward - combined reward
   * - reward: *token_list - reward token
   */
  tokenList: PositionToken[];
  /**
   * Description.
   * Belongs to: common, locked.
   * - common: description, e.g. Curve's liquidity pool will generally have the community-accepted name 3Pool.
   * - locked: description, e.g. Curve's liquidity pool will generally have the community accepted name 3Pool.
   */
  description?: string | undefined;
  /**
   * Unlock time.
   * Belongs to: locked.
   * - locked: unlock time.
   */
  unlockTime?: Date | undefined;
  /**
   * Health rate.
   * Belongs to: lending.
   * - lending: health factor.
   */
  healthRate?: number | undefined;
  /**
   * Debt ratio.
   * Belongs to: leveraged_farming.
   * - leveraged_farming: debt ratio.
   */
  debtRatio?: string | undefined;
}

/** Portfolio item object. */
export interface PortfolioItem {
  /** Statistics. */
  stats: Stats | undefined;
  /**
   * Update timestamp.
   *
   * example: "2023-10-01T12:00:00Z"
   */
  updateTime: Date | undefined;
  /**
   * name is primarily a user-facing label displayed in the front-end to indicate the high-level function
   * or type of the portfolio item (e.g., "Lending" or "NFT Staked").
   * It's meant for simple, intuitive presentation to end-users, helping them quickly
   * understand the nature of their position.
   *
   * example: "POSITION_NAME_YIELD"
   */
  name: PositionName;
  /** Array of detail types. */
  detailTypes: DetailType[];
  /** Pool information. */
  pool: Pool | undefined;
  /** Position index (optional). */
  positionIndex?: string | undefined;
  /**
   * Variant for the detail based on detail_types.
   * detail_types provides more granular, technical classifications for the client (e.g., app or UI)
   * to handle rendering, logic, or adaptation.
   * It allows for fallback handling if certain types aren't supported yet, and prioritizes values from left to right
   * (rightmost being the most detailed/preferred for optimal user experience).
   * If no suitable types are available, the client might default to basic stats like net worth.
   */
  detail: Detail | undefined;
  /** Metadata for the portfolio item, e.g., protocol_id, project_id, etc. */
  assetDict: { [key: string]: string };
}

export interface PortfolioItem_AssetDictEntry {
  key: string;
  value: string;
}

export interface DApp {
  name: string;
  url: string;
  iconUrl: string;
  colors: DApp_Colors | undefined;
}

export interface DApp_Colors {
  primary: string;
  fallback: string;
  shadow: string;
}

export interface ListPositionsRequest {
  address: string;
  chainIds: string;
  currency: string;
}

export interface Position {
  /**
   * Unique identifier for the position
   *
   * example: "uniswap3"
   */
  id: string;
  /**
   * Name of the protocol associated with the position
   *
   * example: "Uniswap V3"
   */
  protocolName: string;
  /**
   * Canonical name of the protocol
   *
   * example: "uniswap"
   */
  canonicalProtocolName: string;
  /**
   * Version of the protocol
   *
   * example: "v3"
   */
  protocolVersion: string;
  /**
   * Chain ID where the position exists
   *
   * example: 1
   */
  chainId: number;
  /**
   * Total value locked (TVL) in the position, in USD
   *
   * example: 2133990287.7294104
   */
  tvl: string;
  /** List of portfolio items associated with the position */
  portfolioItems: PortfolioItem[];
  /** DApp metadata */
  dapp: DApp | undefined;
}

export interface ListPositionsResponse {
  /** Metadata about the request. */
  metadata: ResponseMetadata | undefined;
  /** Result of the request containing positions and unique tokens */
  result: ListPositionsResponse_Result | undefined;
  /** List of errors encountered during the request. */
  errors: string[];
}

export interface ListPositionsResponse_Result {
  /** Unique identifier for the position */
  positions: Position[];
  /** Unique identifier for the positions used for deduplication for balances */
  uniqueTokens: string[];
}
