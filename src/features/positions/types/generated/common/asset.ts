// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: external/common/asset.proto

/* eslint-disable */

/** Asset represents detailed asset/token information */
export interface Asset {
  /** Unique asset identifier (contract address) */
  address: string;
  /** Chain ID where this asset primarily exists */
  chainId: number;
  /** Asset name */
  name: string;
  /** Asset symbol */
  symbol: string;
  /** Number of decimals */
  decimals: number;
  /** Asset type (e.g., "erc20", "native", "wrapped-native") */
  type: string;
  /** Icon URL for the asset */
  iconUrl: string;
  /** Primary network name */
  network: string;
  /** Mainnet contract address */
  mainnetAddress: string;
  /** Whether the asset is verified */
  verified: boolean;
  /** Whether the asset is transferable */
  transferable: boolean;
  /** Asset creation date (ISO 8601 format) */
  creationDate: string;
  /** Display colors for the asset */
  colors: AssetColors | undefined;
  /** Current price information */
  price: AssetPrice | undefined;
  /** Map of network chain_id to network-specific information */
  networks: { [key: string]: AssetNetworkInfo };
  /** Bridging capabilities */
  bridging: AssetBridging | undefined;
}

export interface Asset_NetworksEntry {
  key: string;
  value: AssetNetworkInfo | undefined;
}

/** AssetPrice represents price information for an asset */
export interface AssetPrice {
  /** Timestamp when price was last changed */
  changedAt: Date | undefined;
  /** Relative change in price over 24 hours as percentage */
  relativeChange24h: number;
  /** Current price value in the requested currency */
  value: number;
}

/** AssetColors represents display colors for an asset */
export interface AssetColors {
  /** Primary color for the asset */
  primary: string;
  /** Fallback color if primary is not available */
  fallback: string;
}

/** AssetNetworkInfo represents asset information on a specific network */
export interface AssetNetworkInfo {
  /** Contract address on this network */
  address: string;
  /** Number of decimals for the token on this network */
  decimals: number;
}

/** AssetBridgeNetworkInfo represents bridging capability on a specific network */
export interface AssetBridgeNetworkInfo {
  /** Whether bridging is supported on this network */
  bridgeable: boolean;
}

/** AssetBridging represents bridging information for an asset */
export interface AssetBridging {
  /** Whether the asset supports bridging overall */
  bridgeable: boolean;
  /** Map of network chain_id to bridging capability on that network */
  networks: { [key: string]: AssetBridgeNetworkInfo };
}

export interface AssetBridging_NetworksEntry {
  key: string;
  value: AssetBridgeNetworkInfo | undefined;
}
